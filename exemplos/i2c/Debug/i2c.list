
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f4  080024f4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080024f4  080024f4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024f4  080024f4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080024fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000014  08002510  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002510  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091a6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189d  00000000  00000000  000291e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0002aa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002b330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0f2  00000000  00000000  0002bb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a42a  00000000  00000000  00045c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8622  00000000  00000000  00050034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8656  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df0  00000000  00000000  000f86ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800249c 	.word	0x0800249c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	0800249c 	.word	0x0800249c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 f9b1 	bl	8000588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f825 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f8c1 	bl	80003b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800022e:	f000 f87f 	bl	8000330 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // (0xA0 >> 1) or is equal to 0x50
  // 1010 0000 ==> 0101 0000
  // write a byte on eeprom memory
  HAL_I2C_Master_Transmit(&hi2c1, (0xA0 >> 1), eeprom_write_a, 3, 100);
 8000232:	4a0c      	ldr	r2, [pc, #48]	; (8000264 <main+0x48>)
 8000234:	480c      	ldr	r0, [pc, #48]	; (8000268 <main+0x4c>)
 8000236:	2364      	movs	r3, #100	; 0x64
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2303      	movs	r3, #3
 800023c:	2150      	movs	r1, #80	; 0x50
 800023e:	f000 fcf5 	bl	8000c2c <HAL_I2C_Master_Transmit>

  // read 10 values from
  HAL_I2C_Master_Transmit(&hi2c1, 0x50, eeprom_read_addr, 2, 100);
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <main+0x50>)
 8000244:	4808      	ldr	r0, [pc, #32]	; (8000268 <main+0x4c>)
 8000246:	2364      	movs	r3, #100	; 0x64
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2302      	movs	r3, #2
 800024c:	2150      	movs	r1, #80	; 0x50
 800024e:	f000 fced 	bl	8000c2c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, 0x50, eeprom_read_data, 10, 100);
 8000252:	4a07      	ldr	r2, [pc, #28]	; (8000270 <main+0x54>)
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <main+0x4c>)
 8000256:	2364      	movs	r3, #100	; 0x64
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	230a      	movs	r3, #10
 800025c:	2150      	movs	r1, #80	; 0x50
 800025e:	f000 fded 	bl	8000e3c <HAL_I2C_Master_Receive>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000262:	e7fe      	b.n	8000262 <main+0x46>
 8000264:	20000000 	.word	0x20000000
 8000268:	20000030 	.word	0x20000030
 800026c:	20000004 	.word	0x20000004
 8000270:	2000007c 	.word	0x2000007c

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b590      	push	{r4, r7, lr}
 8000276:	b095      	sub	sp, #84	; 0x54
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	2414      	movs	r4, #20
 800027c:	193b      	adds	r3, r7, r4
 800027e:	0018      	movs	r0, r3
 8000280:	233c      	movs	r3, #60	; 0x3c
 8000282:	001a      	movs	r2, r3
 8000284:	2100      	movs	r1, #0
 8000286:	f002 f901 	bl	800248c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	0018      	movs	r0, r3
 800028e:	2310      	movs	r3, #16
 8000290:	001a      	movs	r2, r3
 8000292:	2100      	movs	r1, #0
 8000294:	f002 f8fa 	bl	800248c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000298:	2380      	movs	r3, #128	; 0x80
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	0018      	movs	r0, r3
 800029e:	f001 f965 	bl	800156c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	2202      	movs	r2, #2
 80002a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	2280      	movs	r2, #128	; 0x80
 80002ac:	0052      	lsls	r2, r2, #1
 80002ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002b0:	0021      	movs	r1, r4
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2240      	movs	r2, #64	; 0x40
 80002bc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2202      	movs	r2, #2
 80002c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2202      	movs	r2, #2
 80002c8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2208      	movs	r2, #8
 80002d4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2280      	movs	r2, #128	; 0x80
 80002da:	0292      	lsls	r2, r2, #10
 80002dc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	0492      	lsls	r2, r2, #18
 80002e4:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2280      	movs	r2, #128	; 0x80
 80002ea:	0592      	lsls	r2, r2, #22
 80002ec:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 f97b 	bl	80015ec <HAL_RCC_OscConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002fa:	f000 f86f 	bl	80003dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2207      	movs	r2, #7
 8000302:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2202      	movs	r2, #2
 8000308:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2102      	movs	r1, #2
 800031a:	0018      	movs	r0, r3
 800031c:	f001 fccc 	bl	8001cb8 <HAL_RCC_ClockConfig>
 8000320:	1e03      	subs	r3, r0, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000324:	f000 f85a 	bl	80003dc <Error_Handler>
  }
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b015      	add	sp, #84	; 0x54
 800032e:	bd90      	pop	{r4, r7, pc}

08000330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000336:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <MX_I2C1_Init+0x78>)
 8000338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <MX_I2C1_Init+0x74>)
 800033c:	4a1b      	ldr	r2, [pc, #108]	; (80003ac <MX_I2C1_Init+0x7c>)
 800033e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000348:	2201      	movs	r2, #1
 800034a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000352:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_I2C1_Init+0x74>)
 800036c:	0018      	movs	r0, r3
 800036e:	f000 fbc7 	bl	8000b00 <HAL_I2C_Init>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000376:	f000 f831 	bl	80003dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <MX_I2C1_Init+0x74>)
 800037c:	2100      	movs	r1, #0
 800037e:	0018      	movs	r0, r3
 8000380:	f001 f85c 	bl	800143c <HAL_I2CEx_ConfigAnalogFilter>
 8000384:	1e03      	subs	r3, r0, #0
 8000386:	d001      	beq.n	800038c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000388:	f000 f828 	bl	80003dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <MX_I2C1_Init+0x74>)
 800038e:	2100      	movs	r1, #0
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f89f 	bl	80014d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800039a:	f000 f81f 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000030 	.word	0x20000030
 80003a8:	40005400 	.word	0x40005400
 80003ac:	00602173 	.word	0x00602173

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <MX_GPIO_Init+0x28>)
 80003b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <MX_GPIO_Init+0x28>)
 80003bc:	2101      	movs	r1, #1
 80003be:	430a      	orrs	r2, r1
 80003c0:	635a      	str	r2, [r3, #52]	; 0x34
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <MX_GPIO_Init+0x28>)
 80003c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003c6:	2201      	movs	r2, #1
 80003c8:	4013      	ands	r3, r2
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b002      	add	sp, #8
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	40021000 	.word	0x40021000

080003dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <Error_Handler+0x8>
	...

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <HAL_MspInit+0x4c>)
 80003f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <HAL_MspInit+0x4c>)
 80003f4:	2101      	movs	r1, #1
 80003f6:	430a      	orrs	r2, r1
 80003f8:	641a      	str	r2, [r3, #64]	; 0x40
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <HAL_MspInit+0x4c>)
 80003fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003fe:	2201      	movs	r2, #1
 8000400:	4013      	ands	r3, r2
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <HAL_MspInit+0x4c>)
 8000408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <HAL_MspInit+0x4c>)
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	0549      	lsls	r1, r1, #21
 8000410:	430a      	orrs	r2, r1
 8000412:	63da      	str	r2, [r3, #60]	; 0x3c
 8000414:	4b07      	ldr	r3, [pc, #28]	; (8000434 <HAL_MspInit+0x4c>)
 8000416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	055b      	lsls	r3, r3, #21
 800041c:	4013      	ands	r3, r2
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000422:	23c0      	movs	r3, #192	; 0xc0
 8000424:	00db      	lsls	r3, r3, #3
 8000426:	0018      	movs	r0, r3
 8000428:	f000 f934 	bl	8000694 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000

08000438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b09d      	sub	sp, #116	; 0x74
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000440:	235c      	movs	r3, #92	; 0x5c
 8000442:	18fb      	adds	r3, r7, r3
 8000444:	0018      	movs	r0, r3
 8000446:	2314      	movs	r3, #20
 8000448:	001a      	movs	r2, r3
 800044a:	2100      	movs	r1, #0
 800044c:	f002 f81e 	bl	800248c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000450:	2410      	movs	r4, #16
 8000452:	193b      	adds	r3, r7, r4
 8000454:	0018      	movs	r0, r3
 8000456:	234c      	movs	r3, #76	; 0x4c
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f002 f816 	bl	800248c <memset>
  if(hi2c->Instance==I2C1)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a23      	ldr	r2, [pc, #140]	; (80004f4 <HAL_I2C_MspInit+0xbc>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d13f      	bne.n	80004ea <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2220      	movs	r2, #32
 800046e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2200      	movs	r2, #0
 8000474:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000476:	193b      	adds	r3, r7, r4
 8000478:	0018      	movs	r0, r3
 800047a:	f001 fda7 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000482:	f7ff ffab 	bl	80003dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <HAL_I2C_MspInit+0xc0>)
 8000488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800048a:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <HAL_I2C_MspInit+0xc0>)
 800048c:	2101      	movs	r1, #1
 800048e:	430a      	orrs	r2, r1
 8000490:	635a      	str	r2, [r3, #52]	; 0x34
 8000492:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <HAL_I2C_MspInit+0xc0>)
 8000494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000496:	2201      	movs	r2, #1
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800049e:	215c      	movs	r1, #92	; 0x5c
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	22c0      	movs	r2, #192	; 0xc0
 80004a4:	00d2      	lsls	r2, r2, #3
 80004a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2212      	movs	r2, #18
 80004ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2206      	movs	r2, #6
 80004be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	187a      	adds	r2, r7, r1
 80004c2:	23a0      	movs	r3, #160	; 0xa0
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	0011      	movs	r1, r2
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 f9ad 	bl	8000828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <HAL_I2C_MspInit+0xc0>)
 80004d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_I2C_MspInit+0xc0>)
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0389      	lsls	r1, r1, #14
 80004d8:	430a      	orrs	r2, r1
 80004da:	63da      	str	r2, [r3, #60]	; 0x3c
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_I2C_MspInit+0xc0>)
 80004de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	039b      	lsls	r3, r3, #14
 80004e4:	4013      	ands	r3, r2
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b01d      	add	sp, #116	; 0x74
 80004f0:	bd90      	pop	{r4, r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	40005400 	.word	0x40005400
 80004f8:	40021000 	.word	0x40021000

080004fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <NMI_Handler+0x4>

08000502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <HardFault_Handler+0x4>

08000508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000520:	f000 f89c 	bl	800065c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000536:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000538:	f7ff fff7 	bl	800052a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <LoopForever+0x6>)
  ldr r1, =_edata
 800053e:	490d      	ldr	r1, [pc, #52]	; (8000574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <LoopForever+0xe>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000554:	4c0a      	ldr	r4, [pc, #40]	; (8000580 <LoopForever+0x16>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000562:	f001 ff6f 	bl	8002444 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000566:	f7ff fe59 	bl	800021c <main>

0800056a <LoopForever>:

LoopForever:
  b LoopForever
 800056a:	e7fe      	b.n	800056a <LoopForever>
  ldr   r0, =_estack
 800056c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000578:	080024fc 	.word	0x080024fc
  ldr r2, =_sbss
 800057c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000580:	2000008c 	.word	0x2000008c

08000584 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_COMP_IRQHandler>
	...

08000588 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <HAL_Init+0x3c>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_Init+0x3c>)
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	0049      	lsls	r1, r1, #1
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a2:	2003      	movs	r0, #3
 80005a4:	f000 f810 	bl	80005c8 <HAL_InitTick>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d003      	beq.n	80005b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	e001      	b.n	80005b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f7ff ff18 	bl	80003e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	781b      	ldrb	r3, [r3, #0]
}
 80005bc:	0018      	movs	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	b002      	add	sp, #8
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40022000 	.word	0x40022000

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005d0:	230f      	movs	r3, #15
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <HAL_InitTick+0x88>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d02b      	beq.n	8000638 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <HAL_InitTick+0x8c>)
 80005e2:	681c      	ldr	r4, [r3, #0]
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <HAL_InitTick+0x88>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	0019      	movs	r1, r3
 80005ea:	23fa      	movs	r3, #250	; 0xfa
 80005ec:	0098      	lsls	r0, r3, #2
 80005ee:	f7ff fd89 	bl	8000104 <__udivsi3>
 80005f2:	0003      	movs	r3, r0
 80005f4:	0019      	movs	r1, r3
 80005f6:	0020      	movs	r0, r4
 80005f8:	f7ff fd84 	bl	8000104 <__udivsi3>
 80005fc:	0003      	movs	r3, r0
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 f905 	bl	800080e <HAL_SYSTICK_Config>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d112      	bne.n	800062e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b03      	cmp	r3, #3
 800060c:	d80a      	bhi.n	8000624 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	2301      	movs	r3, #1
 8000612:	425b      	negs	r3, r3
 8000614:	2200      	movs	r2, #0
 8000616:	0018      	movs	r0, r3
 8000618:	f000 f8e4 	bl	80007e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_InitTick+0x90>)
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	e00d      	b.n	8000640 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000624:	230f      	movs	r3, #15
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	2201      	movs	r2, #1
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	e008      	b.n	8000640 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800062e:	230f      	movs	r3, #15
 8000630:	18fb      	adds	r3, r7, r3
 8000632:	2201      	movs	r2, #1
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	e003      	b.n	8000640 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000638:	230f      	movs	r3, #15
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	2201      	movs	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000640:	230f      	movs	r3, #15
 8000642:	18fb      	adds	r3, r7, r3
 8000644:	781b      	ldrb	r3, [r3, #0]
}
 8000646:	0018      	movs	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	b005      	add	sp, #20
 800064c:	bd90      	pop	{r4, r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000010 	.word	0x20000010
 8000654:	20000008 	.word	0x20000008
 8000658:	2000000c 	.word	0x2000000c

0800065c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <HAL_IncTick+0x1c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	001a      	movs	r2, r3
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_IncTick+0x20>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	18d2      	adds	r2, r2, r3
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <HAL_IncTick+0x20>)
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	20000010 	.word	0x20000010
 800067c:	20000088 	.word	0x20000088

08000680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  return uwTick;
 8000684:	4b02      	ldr	r3, [pc, #8]	; (8000690 <HAL_GetTick+0x10>)
 8000686:	681b      	ldr	r3, [r3, #0]
}
 8000688:	0018      	movs	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	20000088 	.word	0x20000088

08000694 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	0019      	movs	r1, r3
 80006a6:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	430a      	orrs	r2, r1
 80006ac:	601a      	str	r2, [r3, #0]
}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	40010000 	.word	0x40010000
 80006bc:	fffff9ff 	.word	0xfffff9ff

080006c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	0002      	movs	r2, r0
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b7f      	cmp	r3, #127	; 0x7f
 80006d4:	d828      	bhi.n	8000728 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d6:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <__NVIC_SetPriority+0xd4>)
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	089b      	lsrs	r3, r3, #2
 80006e0:	33c0      	adds	r3, #192	; 0xc0
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	589b      	ldr	r3, [r3, r2]
 80006e6:	1dfa      	adds	r2, r7, #7
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	0011      	movs	r1, r2
 80006ec:	2203      	movs	r2, #3
 80006ee:	400a      	ands	r2, r1
 80006f0:	00d2      	lsls	r2, r2, #3
 80006f2:	21ff      	movs	r1, #255	; 0xff
 80006f4:	4091      	lsls	r1, r2
 80006f6:	000a      	movs	r2, r1
 80006f8:	43d2      	mvns	r2, r2
 80006fa:	401a      	ands	r2, r3
 80006fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	019b      	lsls	r3, r3, #6
 8000702:	22ff      	movs	r2, #255	; 0xff
 8000704:	401a      	ands	r2, r3
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	0018      	movs	r0, r3
 800070c:	2303      	movs	r3, #3
 800070e:	4003      	ands	r3, r0
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000714:	481f      	ldr	r0, [pc, #124]	; (8000794 <__NVIC_SetPriority+0xd4>)
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b25b      	sxtb	r3, r3
 800071c:	089b      	lsrs	r3, r3, #2
 800071e:	430a      	orrs	r2, r1
 8000720:	33c0      	adds	r3, #192	; 0xc0
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000726:	e031      	b.n	800078c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <__NVIC_SetPriority+0xd8>)
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	0019      	movs	r1, r3
 8000730:	230f      	movs	r3, #15
 8000732:	400b      	ands	r3, r1
 8000734:	3b08      	subs	r3, #8
 8000736:	089b      	lsrs	r3, r3, #2
 8000738:	3306      	adds	r3, #6
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	18d3      	adds	r3, r2, r3
 800073e:	3304      	adds	r3, #4
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	1dfa      	adds	r2, r7, #7
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	0011      	movs	r1, r2
 8000748:	2203      	movs	r2, #3
 800074a:	400a      	ands	r2, r1
 800074c:	00d2      	lsls	r2, r2, #3
 800074e:	21ff      	movs	r1, #255	; 0xff
 8000750:	4091      	lsls	r1, r2
 8000752:	000a      	movs	r2, r1
 8000754:	43d2      	mvns	r2, r2
 8000756:	401a      	ands	r2, r3
 8000758:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	22ff      	movs	r2, #255	; 0xff
 8000760:	401a      	ands	r2, r3
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	0018      	movs	r0, r3
 8000768:	2303      	movs	r3, #3
 800076a:	4003      	ands	r3, r0
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000770:	4809      	ldr	r0, [pc, #36]	; (8000798 <__NVIC_SetPriority+0xd8>)
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	001c      	movs	r4, r3
 8000778:	230f      	movs	r3, #15
 800077a:	4023      	ands	r3, r4
 800077c:	3b08      	subs	r3, #8
 800077e:	089b      	lsrs	r3, r3, #2
 8000780:	430a      	orrs	r2, r1
 8000782:	3306      	adds	r3, #6
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	18c3      	adds	r3, r0, r3
 8000788:	3304      	adds	r3, #4
 800078a:	601a      	str	r2, [r3, #0]
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b003      	add	sp, #12
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	1e5a      	subs	r2, r3, #1
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	045b      	lsls	r3, r3, #17
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d301      	bcc.n	80007b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b0:	2301      	movs	r3, #1
 80007b2:	e010      	b.n	80007d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <SysTick_Config+0x44>)
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	3a01      	subs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007bc:	2301      	movs	r3, #1
 80007be:	425b      	negs	r3, r3
 80007c0:	2103      	movs	r1, #3
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff ff7c 	bl	80006c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <SysTick_Config+0x44>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <SysTick_Config+0x44>)
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	0018      	movs	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	e000e010 	.word	0xe000e010

080007e4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	210f      	movs	r1, #15
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	1c02      	adds	r2, r0, #0
 80007f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff ff5d 	bl	80006c0 <__NVIC_SetPriority>
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b004      	add	sp, #16
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	0018      	movs	r0, r3
 800081a:	f7ff ffbf 	bl	800079c <SysTick_Config>
 800081e:	0003      	movs	r3, r0
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b002      	add	sp, #8
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000836:	e14d      	b.n	8000ad4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2101      	movs	r1, #1
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4091      	lsls	r1, r2
 8000842:	000a      	movs	r2, r1
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d100      	bne.n	8000850 <HAL_GPIO_Init+0x28>
 800084e:	e13e      	b.n	8000ace <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2203      	movs	r2, #3
 8000856:	4013      	ands	r3, r2
 8000858:	2b01      	cmp	r3, #1
 800085a:	d005      	beq.n	8000868 <HAL_GPIO_Init+0x40>
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2203      	movs	r2, #3
 8000862:	4013      	ands	r3, r2
 8000864:	2b02      	cmp	r3, #2
 8000866:	d130      	bne.n	80008ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	2203      	movs	r2, #3
 8000874:	409a      	lsls	r2, r3
 8000876:	0013      	movs	r3, r2
 8000878:	43da      	mvns	r2, r3
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	4013      	ands	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	409a      	lsls	r2, r3
 800088a:	0013      	movs	r3, r2
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4313      	orrs	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800089e:	2201      	movs	r2, #1
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	409a      	lsls	r2, r3
 80008a4:	0013      	movs	r3, r2
 80008a6:	43da      	mvns	r2, r3
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	4013      	ands	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	091b      	lsrs	r3, r3, #4
 80008b4:	2201      	movs	r2, #1
 80008b6:	401a      	ands	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	409a      	lsls	r2, r3
 80008bc:	0013      	movs	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2203      	movs	r2, #3
 80008d0:	4013      	ands	r3, r2
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d017      	beq.n	8000906 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	2203      	movs	r2, #3
 80008e2:	409a      	lsls	r2, r3
 80008e4:	0013      	movs	r3, r2
 80008e6:	43da      	mvns	r2, r3
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	689a      	ldr	r2, [r3, #8]
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	409a      	lsls	r2, r3
 80008f8:	0013      	movs	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2203      	movs	r2, #3
 800090c:	4013      	ands	r3, r2
 800090e:	2b02      	cmp	r3, #2
 8000910:	d123      	bne.n	800095a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	08da      	lsrs	r2, r3, #3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3208      	adds	r2, #8
 800091a:	0092      	lsls	r2, r2, #2
 800091c:	58d3      	ldr	r3, [r2, r3]
 800091e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	2207      	movs	r2, #7
 8000924:	4013      	ands	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	220f      	movs	r2, #15
 800092a:	409a      	lsls	r2, r3
 800092c:	0013      	movs	r3, r2
 800092e:	43da      	mvns	r2, r3
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	4013      	ands	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	691a      	ldr	r2, [r3, #16]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	2107      	movs	r1, #7
 800093e:	400b      	ands	r3, r1
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	409a      	lsls	r2, r3
 8000944:	0013      	movs	r3, r2
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	08da      	lsrs	r2, r3, #3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3208      	adds	r2, #8
 8000954:	0092      	lsls	r2, r2, #2
 8000956:	6939      	ldr	r1, [r7, #16]
 8000958:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	2203      	movs	r2, #3
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	43da      	mvns	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2203      	movs	r2, #3
 8000978:	401a      	ands	r2, r3
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	409a      	lsls	r2, r3
 8000980:	0013      	movs	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	23c0      	movs	r3, #192	; 0xc0
 8000994:	029b      	lsls	r3, r3, #10
 8000996:	4013      	ands	r3, r2
 8000998:	d100      	bne.n	800099c <HAL_GPIO_Init+0x174>
 800099a:	e098      	b.n	8000ace <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800099c:	4a53      	ldr	r2, [pc, #332]	; (8000aec <HAL_GPIO_Init+0x2c4>)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	3318      	adds	r3, #24
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	589b      	ldr	r3, [r3, r2]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2203      	movs	r2, #3
 80009ae:	4013      	ands	r3, r2
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	220f      	movs	r2, #15
 80009b4:	409a      	lsls	r2, r3
 80009b6:	0013      	movs	r3, r2
 80009b8:	43da      	mvns	r2, r3
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d019      	beq.n	80009fe <HAL_GPIO_Init+0x1d6>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a48      	ldr	r2, [pc, #288]	; (8000af0 <HAL_GPIO_Init+0x2c8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d013      	beq.n	80009fa <HAL_GPIO_Init+0x1d2>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a47      	ldr	r2, [pc, #284]	; (8000af4 <HAL_GPIO_Init+0x2cc>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d00d      	beq.n	80009f6 <HAL_GPIO_Init+0x1ce>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a46      	ldr	r2, [pc, #280]	; (8000af8 <HAL_GPIO_Init+0x2d0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d007      	beq.n	80009f2 <HAL_GPIO_Init+0x1ca>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a45      	ldr	r2, [pc, #276]	; (8000afc <HAL_GPIO_Init+0x2d4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d101      	bne.n	80009ee <HAL_GPIO_Init+0x1c6>
 80009ea:	2304      	movs	r3, #4
 80009ec:	e008      	b.n	8000a00 <HAL_GPIO_Init+0x1d8>
 80009ee:	2305      	movs	r3, #5
 80009f0:	e006      	b.n	8000a00 <HAL_GPIO_Init+0x1d8>
 80009f2:	2303      	movs	r3, #3
 80009f4:	e004      	b.n	8000a00 <HAL_GPIO_Init+0x1d8>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e002      	b.n	8000a00 <HAL_GPIO_Init+0x1d8>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <HAL_GPIO_Init+0x1d8>
 80009fe:	2300      	movs	r3, #0
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	2103      	movs	r1, #3
 8000a04:	400a      	ands	r2, r1
 8000a06:	00d2      	lsls	r2, r2, #3
 8000a08:	4093      	lsls	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000a10:	4936      	ldr	r1, [pc, #216]	; (8000aec <HAL_GPIO_Init+0x2c4>)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	089b      	lsrs	r3, r3, #2
 8000a16:	3318      	adds	r3, #24
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a1e:	4a33      	ldr	r2, [pc, #204]	; (8000aec <HAL_GPIO_Init+0x2c4>)
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	58d3      	ldr	r3, [r2, r3]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	025b      	lsls	r3, r3, #9
 8000a38:	4013      	ands	r3, r2
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a44:	4929      	ldr	r1, [pc, #164]	; (8000aec <HAL_GPIO_Init+0x2c4>)
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000a4c:	4a27      	ldr	r2, [pc, #156]	; (8000aec <HAL_GPIO_Init+0x2c4>)
 8000a4e:	2384      	movs	r3, #132	; 0x84
 8000a50:	58d3      	ldr	r3, [r2, r3]
 8000a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	43da      	mvns	r2, r3
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	029b      	lsls	r3, r3, #10
 8000a66:	4013      	ands	r3, r2
 8000a68:	d003      	beq.n	8000a72 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a72:	491e      	ldr	r1, [pc, #120]	; (8000aec <HAL_GPIO_Init+0x2c4>)
 8000a74:	2284      	movs	r2, #132	; 0x84
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_GPIO_Init+0x2c4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	43da      	mvns	r2, r3
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	035b      	lsls	r3, r3, #13
 8000a92:	4013      	ands	r3, r2
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_GPIO_Init+0x2c4>)
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_GPIO_Init+0x2c4>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	43da      	mvns	r2, r3
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	039b      	lsls	r3, r3, #14
 8000abc:	4013      	ands	r3, r2
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_GPIO_Init+0x2c4>)
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	40da      	lsrs	r2, r3
 8000adc:	1e13      	subs	r3, r2, #0
 8000ade:	d000      	beq.n	8000ae2 <HAL_GPIO_Init+0x2ba>
 8000ae0:	e6aa      	b.n	8000838 <HAL_GPIO_Init+0x10>
  }
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b006      	add	sp, #24
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021800 	.word	0x40021800
 8000af0:	50000400 	.word	0x50000400
 8000af4:	50000800 	.word	0x50000800
 8000af8:	50000c00 	.word	0x50000c00
 8000afc:	50001000 	.word	0x50001000

08000b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e082      	b.n	8000c18 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2241      	movs	r2, #65	; 0x41
 8000b16:	5c9b      	ldrb	r3, [r3, r2]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d107      	bne.n	8000b2e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2240      	movs	r2, #64	; 0x40
 8000b22:	2100      	movs	r1, #0
 8000b24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff fc85 	bl	8000438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2241      	movs	r2, #65	; 0x41
 8000b32:	2124      	movs	r1, #36	; 0x24
 8000b34:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2101      	movs	r1, #1
 8000b42:	438a      	bics	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4934      	ldr	r1, [pc, #208]	; (8000c20 <HAL_I2C_Init+0x120>)
 8000b50:	400a      	ands	r2, r1
 8000b52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4931      	ldr	r1, [pc, #196]	; (8000c24 <HAL_I2C_Init+0x124>)
 8000b60:	400a      	ands	r2, r1
 8000b62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d108      	bne.n	8000b7e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	0209      	lsls	r1, r1, #8
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	e007      	b.n	8000b8e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2184      	movs	r1, #132	; 0x84
 8000b88:	0209      	lsls	r1, r1, #8
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d104      	bne.n	8000ba0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	491f      	ldr	r1, [pc, #124]	; (8000c28 <HAL_I2C_Init+0x128>)
 8000bac:	430a      	orrs	r2, r1
 8000bae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	491a      	ldr	r1, [pc, #104]	; (8000c24 <HAL_I2C_Init+0x124>)
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691a      	ldr	r2, [r3, #16]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69d9      	ldr	r1, [r3, #28]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a1a      	ldr	r2, [r3, #32]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2241      	movs	r2, #65	; 0x41
 8000c04:	2120      	movs	r1, #32
 8000c06:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2242      	movs	r2, #66	; 0x42
 8000c12:	2100      	movs	r1, #0
 8000c14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	f0ffffff 	.word	0xf0ffffff
 8000c24:	ffff7fff 	.word	0xffff7fff
 8000c28:	02008000 	.word	0x02008000

08000c2c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af02      	add	r7, sp, #8
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	0008      	movs	r0, r1
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	0019      	movs	r1, r3
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	1c02      	adds	r2, r0, #0
 8000c40:	801a      	strh	r2, [r3, #0]
 8000c42:	2308      	movs	r3, #8
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	1c0a      	adds	r2, r1, #0
 8000c48:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2241      	movs	r2, #65	; 0x41
 8000c4e:	5c9b      	ldrb	r3, [r3, r2]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b20      	cmp	r3, #32
 8000c54:	d000      	beq.n	8000c58 <HAL_I2C_Master_Transmit+0x2c>
 8000c56:	e0e7      	b.n	8000e28 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2240      	movs	r2, #64	; 0x40
 8000c5c:	5c9b      	ldrb	r3, [r3, r2]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d101      	bne.n	8000c66 <HAL_I2C_Master_Transmit+0x3a>
 8000c62:	2302      	movs	r3, #2
 8000c64:	e0e1      	b.n	8000e2a <HAL_I2C_Master_Transmit+0x1fe>
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c6e:	f7ff fd07 	bl	8000680 <HAL_GetTick>
 8000c72:	0003      	movs	r3, r0
 8000c74:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	0219      	lsls	r1, r3, #8
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	2319      	movs	r3, #25
 8000c82:	2201      	movs	r2, #1
 8000c84:	f000 fa04 	bl	8001090 <I2C_WaitOnFlagUntilTimeout>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e0cc      	b.n	8000e2a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2241      	movs	r2, #65	; 0x41
 8000c94:	2121      	movs	r1, #33	; 0x21
 8000c96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2242      	movs	r2, #66	; 0x42
 8000c9c:	2110      	movs	r1, #16
 8000c9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2208      	movs	r2, #8
 8000cb0:	18ba      	adds	r2, r7, r2
 8000cb2:	8812      	ldrh	r2, [r2, #0]
 8000cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	2bff      	cmp	r3, #255	; 0xff
 8000cc4:	d911      	bls.n	8000cea <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	22ff      	movs	r2, #255	; 0xff
 8000cca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	045c      	lsls	r4, r3, #17
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	8819      	ldrh	r1, [r3, #0]
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <HAL_I2C_Master_Transmit+0x208>)
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	0023      	movs	r3, r4
 8000ce4:	f000 fb74 	bl	80013d0 <I2C_TransferConfig>
 8000ce8:	e075      	b.n	8000dd6 <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	049c      	lsls	r4, r3, #18
 8000cfe:	230a      	movs	r3, #10
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	8819      	ldrh	r1, [r3, #0]
 8000d04:	68f8      	ldr	r0, [r7, #12]
 8000d06:	4b4b      	ldr	r3, [pc, #300]	; (8000e34 <HAL_I2C_Master_Transmit+0x208>)
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	0023      	movs	r3, r4
 8000d0c:	f000 fb60 	bl	80013d0 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000d10:	e061      	b.n	8000dd6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 f9f8 	bl	800110e <I2C_WaitOnTXISFlagUntilTimeout>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e081      	b.n	8000e2a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	3b01      	subs	r3, #1
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d03a      	beq.n	8000dd6 <HAL_I2C_Master_Transmit+0x1aa>
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d136      	bne.n	8000dd6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	0013      	movs	r3, r2
 8000d72:	2200      	movs	r2, #0
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	f000 f98b 	bl	8001090 <I2C_WaitOnFlagUntilTimeout>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e053      	b.n	8000e2a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	2bff      	cmp	r3, #255	; 0xff
 8000d8a:	d911      	bls.n	8000db0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	22ff      	movs	r2, #255	; 0xff
 8000d90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	045c      	lsls	r4, r3, #17
 8000d9c:	230a      	movs	r3, #10
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	8819      	ldrh	r1, [r3, #0]
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	2300      	movs	r3, #0
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	0023      	movs	r3, r4
 8000daa:	f000 fb11 	bl	80013d0 <I2C_TransferConfig>
 8000dae:	e012      	b.n	8000dd6 <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	049c      	lsls	r4, r3, #18
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	8819      	ldrh	r1, [r3, #0]
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	0023      	movs	r3, r4
 8000dd2:	f000 fafd 	bl	80013d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d198      	bne.n	8000d12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 f9d0 	bl	800118c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e01a      	b.n	8000e2a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2220      	movs	r2, #32
 8000dfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	490c      	ldr	r1, [pc, #48]	; (8000e38 <HAL_I2C_Master_Transmit+0x20c>)
 8000e08:	400a      	ands	r2, r1
 8000e0a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2241      	movs	r2, #65	; 0x41
 8000e10:	2120      	movs	r1, #32
 8000e12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2242      	movs	r2, #66	; 0x42
 8000e18:	2100      	movs	r1, #0
 8000e1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2240      	movs	r2, #64	; 0x40
 8000e20:	2100      	movs	r1, #0
 8000e22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	e000      	b.n	8000e2a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8000e28:	2302      	movs	r3, #2
  }
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b007      	add	sp, #28
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	80002000 	.word	0x80002000
 8000e38:	fe00e800 	.word	0xfe00e800

08000e3c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	0008      	movs	r0, r1
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	0019      	movs	r1, r3
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	1c02      	adds	r2, r0, #0
 8000e50:	801a      	strh	r2, [r3, #0]
 8000e52:	2308      	movs	r3, #8
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	1c0a      	adds	r2, r1, #0
 8000e58:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2241      	movs	r2, #65	; 0x41
 8000e5e:	5c9b      	ldrb	r3, [r3, r2]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b20      	cmp	r3, #32
 8000e64:	d000      	beq.n	8000e68 <HAL_I2C_Master_Receive+0x2c>
 8000e66:	e0e8      	b.n	800103a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2240      	movs	r2, #64	; 0x40
 8000e6c:	5c9b      	ldrb	r3, [r3, r2]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d101      	bne.n	8000e76 <HAL_I2C_Master_Receive+0x3a>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e0e2      	b.n	800103c <HAL_I2C_Master_Receive+0x200>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2240      	movs	r2, #64	; 0x40
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e7e:	f7ff fbff 	bl	8000680 <HAL_GetTick>
 8000e82:	0003      	movs	r3, r0
 8000e84:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	0219      	lsls	r1, r3, #8
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2319      	movs	r3, #25
 8000e92:	2201      	movs	r2, #1
 8000e94:	f000 f8fc 	bl	8001090 <I2C_WaitOnFlagUntilTimeout>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e0cd      	b.n	800103c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2241      	movs	r2, #65	; 0x41
 8000ea4:	2122      	movs	r1, #34	; 0x22
 8000ea6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2242      	movs	r2, #66	; 0x42
 8000eac:	2110      	movs	r1, #16
 8000eae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	18ba      	adds	r2, r7, r2
 8000ec2:	8812      	ldrh	r2, [r2, #0]
 8000ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	2bff      	cmp	r3, #255	; 0xff
 8000ed4:	d911      	bls.n	8000efa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	22ff      	movs	r2, #255	; 0xff
 8000eda:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	045c      	lsls	r4, r3, #17
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	8819      	ldrh	r1, [r3, #0]
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	4b55      	ldr	r3, [pc, #340]	; (8001044 <HAL_I2C_Master_Receive+0x208>)
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	0023      	movs	r3, r4
 8000ef4:	f000 fa6c 	bl	80013d0 <I2C_TransferConfig>
 8000ef8:	e076      	b.n	8000fe8 <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	049c      	lsls	r4, r3, #18
 8000f0e:	230a      	movs	r3, #10
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	8819      	ldrh	r1, [r3, #0]
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <HAL_I2C_Master_Receive+0x208>)
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	0023      	movs	r3, r4
 8000f1c:	f000 fa58 	bl	80013d0 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8000f20:	e062      	b.n	8000fe8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f000 f96b 	bl	8001204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000f2e:	1e03      	subs	r3, r0, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e082      	b.n	800103c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f52:	3b01      	subs	r3, #1
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3b01      	subs	r3, #1
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d03a      	beq.n	8000fe8 <HAL_I2C_Master_Receive+0x1ac>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d136      	bne.n	8000fe8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	0013      	movs	r3, r2
 8000f84:	2200      	movs	r2, #0
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	f000 f882 	bl	8001090 <I2C_WaitOnFlagUntilTimeout>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e053      	b.n	800103c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	2bff      	cmp	r3, #255	; 0xff
 8000f9c:	d911      	bls.n	8000fc2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	22ff      	movs	r2, #255	; 0xff
 8000fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	045c      	lsls	r4, r3, #17
 8000fae:	230a      	movs	r3, #10
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	8819      	ldrh	r1, [r3, #0]
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	0023      	movs	r3, r4
 8000fbc:	f000 fa08 	bl	80013d0 <I2C_TransferConfig>
 8000fc0:	e012      	b.n	8000fe8 <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	049c      	lsls	r4, r3, #18
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	8819      	ldrh	r1, [r3, #0]
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	0023      	movs	r3, r4
 8000fe4:	f000 f9f4 	bl	80013d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d197      	bne.n	8000f22 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f000 f8c7 	bl	800118c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d001      	beq.n	8001006 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e01a      	b.n	800103c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2220      	movs	r2, #32
 800100c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	490b      	ldr	r1, [pc, #44]	; (8001048 <HAL_I2C_Master_Receive+0x20c>)
 800101a:	400a      	ands	r2, r1
 800101c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2241      	movs	r2, #65	; 0x41
 8001022:	2120      	movs	r1, #32
 8001024:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2242      	movs	r2, #66	; 0x42
 800102a:	2100      	movs	r1, #0
 800102c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2240      	movs	r2, #64	; 0x40
 8001032:	2100      	movs	r1, #0
 8001034:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800103a:	2302      	movs	r3, #2
  }
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b007      	add	sp, #28
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	80002400 	.word	0x80002400
 8001048:	fe00e800 	.word	0xfe00e800

0800104c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	2202      	movs	r2, #2
 800105c:	4013      	ands	r3, r2
 800105e:	2b02      	cmp	r3, #2
 8001060:	d103      	bne.n	800106a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2200      	movs	r2, #0
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	2201      	movs	r2, #1
 8001072:	4013      	ands	r3, r2
 8001074:	2b01      	cmp	r3, #1
 8001076:	d007      	beq.n	8001088 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	699a      	ldr	r2, [r3, #24]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2101      	movs	r1, #1
 8001084:	430a      	orrs	r2, r1
 8001086:	619a      	str	r2, [r3, #24]
  }
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}

08001090 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010a0:	e021      	b.n	80010e6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	d01e      	beq.n	80010e6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010a8:	f7ff faea 	bl	8000680 <HAL_GetTick>
 80010ac:	0002      	movs	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d302      	bcc.n	80010be <I2C_WaitOnFlagUntilTimeout+0x2e>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d113      	bne.n	80010e6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	2220      	movs	r2, #32
 80010c4:	431a      	orrs	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2241      	movs	r2, #65	; 0x41
 80010ce:	2120      	movs	r1, #32
 80010d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2242      	movs	r2, #66	; 0x42
 80010d6:	2100      	movs	r1, #0
 80010d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2240      	movs	r2, #64	; 0x40
 80010de:	2100      	movs	r1, #0
 80010e0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	4013      	ands	r3, r2
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	425a      	negs	r2, r3
 80010f6:	4153      	adcs	r3, r2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	001a      	movs	r2, r3
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d0ce      	beq.n	80010a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	0018      	movs	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	b004      	add	sp, #16
 800110c:	bd80      	pop	{r7, pc}

0800110e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800111a:	e02b      	b.n	8001174 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	0018      	movs	r0, r3
 8001124:	f000 f8da 	bl	80012dc <I2C_IsAcknowledgeFailed>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d001      	beq.n	8001130 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e029      	b.n	8001184 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	3301      	adds	r3, #1
 8001134:	d01e      	beq.n	8001174 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001136:	f7ff faa3 	bl	8000680 <HAL_GetTick>
 800113a:	0002      	movs	r2, r0
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	429a      	cmp	r2, r3
 8001144:	d302      	bcc.n	800114c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d113      	bne.n	8001174 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	2220      	movs	r2, #32
 8001152:	431a      	orrs	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2241      	movs	r2, #65	; 0x41
 800115c:	2120      	movs	r1, #32
 800115e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2242      	movs	r2, #66	; 0x42
 8001164:	2100      	movs	r1, #0
 8001166:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2240      	movs	r2, #64	; 0x40
 800116c:	2100      	movs	r1, #0
 800116e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e007      	b.n	8001184 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	2202      	movs	r2, #2
 800117c:	4013      	ands	r3, r2
 800117e:	2b02      	cmp	r3, #2
 8001180:	d1cc      	bne.n	800111c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	0018      	movs	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	b004      	add	sp, #16
 800118a:	bd80      	pop	{r7, pc}

0800118c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001198:	e028      	b.n	80011ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	0018      	movs	r0, r3
 80011a2:	f000 f89b 	bl	80012dc <I2C_IsAcknowledgeFailed>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d001      	beq.n	80011ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e026      	b.n	80011fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011ae:	f7ff fa67 	bl	8000680 <HAL_GetTick>
 80011b2:	0002      	movs	r2, r0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d302      	bcc.n	80011c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d113      	bne.n	80011ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c8:	2220      	movs	r2, #32
 80011ca:	431a      	orrs	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2241      	movs	r2, #65	; 0x41
 80011d4:	2120      	movs	r1, #32
 80011d6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2242      	movs	r2, #66	; 0x42
 80011dc:	2100      	movs	r1, #0
 80011de:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	2100      	movs	r1, #0
 80011e6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e007      	b.n	80011fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2220      	movs	r2, #32
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b20      	cmp	r3, #32
 80011f8:	d1cf      	bne.n	800119a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}

08001204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001210:	e055      	b.n	80012be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	0018      	movs	r0, r3
 800121a:	f000 f85f 	bl	80012dc <I2C_IsAcknowledgeFailed>
 800121e:	1e03      	subs	r3, r0, #0
 8001220:	d001      	beq.n	8001226 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e053      	b.n	80012ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	2220      	movs	r2, #32
 800122e:	4013      	ands	r3, r2
 8001230:	2b20      	cmp	r3, #32
 8001232:	d129      	bne.n	8001288 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2204      	movs	r2, #4
 800123c:	4013      	ands	r3, r2
 800123e:	2b04      	cmp	r3, #4
 8001240:	d105      	bne.n	800124e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e03f      	b.n	80012ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2220      	movs	r2, #32
 8001254:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	491d      	ldr	r1, [pc, #116]	; (80012d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001262:	400a      	ands	r2, r1
 8001264:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2241      	movs	r2, #65	; 0x41
 8001270:	2120      	movs	r1, #32
 8001272:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2242      	movs	r2, #66	; 0x42
 8001278:	2100      	movs	r1, #0
 800127a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2240      	movs	r2, #64	; 0x40
 8001280:	2100      	movs	r1, #0
 8001282:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e022      	b.n	80012ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001288:	f7ff f9fa 	bl	8000680 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	429a      	cmp	r2, r3
 8001296:	d302      	bcc.n	800129e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	2220      	movs	r2, #32
 80012a4:	431a      	orrs	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2241      	movs	r2, #65	; 0x41
 80012ae:	2120      	movs	r1, #32
 80012b0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2240      	movs	r2, #64	; 0x40
 80012b6:	2100      	movs	r1, #0
 80012b8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e007      	b.n	80012ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	2204      	movs	r2, #4
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d1a2      	bne.n	8001212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b004      	add	sp, #16
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	fe00e800 	.word	0xfe00e800

080012dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2210      	movs	r2, #16
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d164      	bne.n	80013c0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	049b      	lsls	r3, r3, #18
 8001300:	401a      	ands	r2, r3
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	049b      	lsls	r3, r3, #18
 8001306:	429a      	cmp	r2, r3
 8001308:	d02b      	beq.n	8001362 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	01c9      	lsls	r1, r1, #7
 8001318:	430a      	orrs	r2, r1
 800131a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800131c:	e021      	b.n	8001362 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	3301      	adds	r3, #1
 8001322:	d01e      	beq.n	8001362 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001324:	f7ff f9ac 	bl	8000680 <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	429a      	cmp	r2, r3
 8001332:	d302      	bcc.n	800133a <I2C_IsAcknowledgeFailed+0x5e>
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d113      	bne.n	8001362 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	2220      	movs	r2, #32
 8001340:	431a      	orrs	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2241      	movs	r2, #65	; 0x41
 800134a:	2120      	movs	r1, #32
 800134c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2242      	movs	r2, #66	; 0x42
 8001352:	2100      	movs	r1, #0
 8001354:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2240      	movs	r2, #64	; 0x40
 800135a:	2100      	movs	r1, #0
 800135c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e02f      	b.n	80013c2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	2220      	movs	r2, #32
 800136a:	4013      	ands	r3, r2
 800136c:	2b20      	cmp	r3, #32
 800136e:	d1d6      	bne.n	800131e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2210      	movs	r2, #16
 8001376:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2220      	movs	r2, #32
 800137e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff fe62 	bl	800104c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	490e      	ldr	r1, [pc, #56]	; (80013cc <I2C_IsAcknowledgeFailed+0xf0>)
 8001394:	400a      	ands	r2, r1
 8001396:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	2204      	movs	r2, #4
 800139e:	431a      	orrs	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2241      	movs	r2, #65	; 0x41
 80013a8:	2120      	movs	r1, #32
 80013aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2242      	movs	r2, #66	; 0x42
 80013b0:	2100      	movs	r1, #0
 80013b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2240      	movs	r2, #64	; 0x40
 80013b8:	2100      	movs	r1, #0
 80013ba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b004      	add	sp, #16
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	fe00e800 	.word	0xfe00e800

080013d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	0008      	movs	r0, r1
 80013da:	0011      	movs	r1, r2
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	240a      	movs	r4, #10
 80013e0:	193b      	adds	r3, r7, r4
 80013e2:	1c02      	adds	r2, r0, #0
 80013e4:	801a      	strh	r2, [r3, #0]
 80013e6:	2009      	movs	r0, #9
 80013e8:	183b      	adds	r3, r7, r0
 80013ea:	1c0a      	adds	r2, r1, #0
 80013ec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	6a3a      	ldr	r2, [r7, #32]
 80013f6:	0d51      	lsrs	r1, r2, #21
 80013f8:	2280      	movs	r2, #128	; 0x80
 80013fa:	00d2      	lsls	r2, r2, #3
 80013fc:	400a      	ands	r2, r1
 80013fe:	490e      	ldr	r1, [pc, #56]	; (8001438 <I2C_TransferConfig+0x68>)
 8001400:	430a      	orrs	r2, r1
 8001402:	43d2      	mvns	r2, r2
 8001404:	401a      	ands	r2, r3
 8001406:	0011      	movs	r1, r2
 8001408:	193b      	adds	r3, r7, r4
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	059b      	lsls	r3, r3, #22
 800140e:	0d9a      	lsrs	r2, r3, #22
 8001410:	183b      	adds	r3, r7, r0
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	0418      	lsls	r0, r3, #16
 8001416:	23ff      	movs	r3, #255	; 0xff
 8001418:	041b      	lsls	r3, r3, #16
 800141a:	4003      	ands	r3, r0
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	431a      	orrs	r2, r3
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	431a      	orrs	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b005      	add	sp, #20
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	03ff63ff 	.word	0x03ff63ff

0800143c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2241      	movs	r2, #65	; 0x41
 800144a:	5c9b      	ldrb	r3, [r3, r2]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b20      	cmp	r3, #32
 8001450:	d138      	bne.n	80014c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2240      	movs	r2, #64	; 0x40
 8001456:	5c9b      	ldrb	r3, [r3, r2]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800145c:	2302      	movs	r3, #2
 800145e:	e032      	b.n	80014c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2240      	movs	r2, #64	; 0x40
 8001464:	2101      	movs	r1, #1
 8001466:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2241      	movs	r2, #65	; 0x41
 800146c:	2124      	movs	r1, #36	; 0x24
 800146e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2101      	movs	r1, #1
 800147c:	438a      	bics	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4911      	ldr	r1, [pc, #68]	; (80014d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800148c:	400a      	ands	r2, r1
 800148e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6819      	ldr	r1, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2101      	movs	r1, #1
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2241      	movs	r2, #65	; 0x41
 80014b4:	2120      	movs	r1, #32
 80014b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2240      	movs	r2, #64	; 0x40
 80014bc:	2100      	movs	r1, #0
 80014be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e000      	b.n	80014c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014c4:	2302      	movs	r3, #2
  }
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b002      	add	sp, #8
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	ffffefff 	.word	0xffffefff

080014d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2241      	movs	r2, #65	; 0x41
 80014e2:	5c9b      	ldrb	r3, [r3, r2]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	d139      	bne.n	800155e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2240      	movs	r2, #64	; 0x40
 80014ee:	5c9b      	ldrb	r3, [r3, r2]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e033      	b.n	8001560 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2240      	movs	r2, #64	; 0x40
 80014fc:	2101      	movs	r1, #1
 80014fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2241      	movs	r2, #65	; 0x41
 8001504:	2124      	movs	r1, #36	; 0x24
 8001506:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2101      	movs	r1, #1
 8001514:	438a      	bics	r2, r1
 8001516:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2241      	movs	r2, #65	; 0x41
 800154e:	2120      	movs	r1, #32
 8001550:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2240      	movs	r2, #64	; 0x40
 8001556:	2100      	movs	r1, #0
 8001558:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800155e:	2302      	movs	r3, #2
  }
}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	b004      	add	sp, #16
 8001566:	bd80      	pop	{r7, pc}
 8001568:	fffff0ff 	.word	0xfffff0ff

0800156c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800157a:	4013      	ands	r3, r2
 800157c:	0019      	movs	r1, r3
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	429a      	cmp	r2, r3
 800158e:	d11f      	bne.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	0013      	movs	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	189b      	adds	r3, r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4912      	ldr	r1, [pc, #72]	; (80015e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800159e:	0018      	movs	r0, r3
 80015a0:	f7fe fdb0 	bl	8000104 <__udivsi3>
 80015a4:	0003      	movs	r3, r0
 80015a6:	3301      	adds	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015aa:	e008      	b.n	80015be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e001      	b.n	80015be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e009      	b.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015c0:	695a      	ldr	r2, [r3, #20]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	401a      	ands	r2, r3
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d0ed      	beq.n	80015ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	40007000 	.word	0x40007000
 80015e0:	fffff9ff 	.word	0xfffff9ff
 80015e4:	20000008 	.word	0x20000008
 80015e8:	000f4240 	.word	0x000f4240

080015ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d102      	bne.n	8001600 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	f000 fb56 	bl	8001cac <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	4013      	ands	r3, r2
 8001608:	d100      	bne.n	800160c <HAL_RCC_OscConfig+0x20>
 800160a:	e07d      	b.n	8001708 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160c:	4bc3      	ldr	r3, [pc, #780]	; (800191c <HAL_RCC_OscConfig+0x330>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2238      	movs	r2, #56	; 0x38
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001616:	4bc1      	ldr	r3, [pc, #772]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	2203      	movs	r2, #3
 800161c:	4013      	ands	r3, r2
 800161e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2b10      	cmp	r3, #16
 8001624:	d102      	bne.n	800162c <HAL_RCC_OscConfig+0x40>
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d002      	beq.n	8001632 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2b08      	cmp	r3, #8
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001632:	4bba      	ldr	r3, [pc, #744]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	029b      	lsls	r3, r3, #10
 800163a:	4013      	ands	r3, r2
 800163c:	d063      	beq.n	8001706 <HAL_RCC_OscConfig+0x11a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d15f      	bne.n	8001706 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	f000 fb30 	bl	8001cac <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	025b      	lsls	r3, r3, #9
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_RCC_OscConfig+0x7c>
 8001658:	4bb0      	ldr	r3, [pc, #704]	; (800191c <HAL_RCC_OscConfig+0x330>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4baf      	ldr	r3, [pc, #700]	; (800191c <HAL_RCC_OscConfig+0x330>)
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	0249      	lsls	r1, r1, #9
 8001662:	430a      	orrs	r2, r1
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e020      	b.n	80016aa <HAL_RCC_OscConfig+0xbe>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	23a0      	movs	r3, #160	; 0xa0
 800166e:	02db      	lsls	r3, r3, #11
 8001670:	429a      	cmp	r2, r3
 8001672:	d10e      	bne.n	8001692 <HAL_RCC_OscConfig+0xa6>
 8001674:	4ba9      	ldr	r3, [pc, #676]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4ba8      	ldr	r3, [pc, #672]	; (800191c <HAL_RCC_OscConfig+0x330>)
 800167a:	2180      	movs	r1, #128	; 0x80
 800167c:	02c9      	lsls	r1, r1, #11
 800167e:	430a      	orrs	r2, r1
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	4ba6      	ldr	r3, [pc, #664]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4ba5      	ldr	r3, [pc, #660]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	0249      	lsls	r1, r1, #9
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e00b      	b.n	80016aa <HAL_RCC_OscConfig+0xbe>
 8001692:	4ba2      	ldr	r3, [pc, #648]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4ba1      	ldr	r3, [pc, #644]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001698:	49a1      	ldr	r1, [pc, #644]	; (8001920 <HAL_RCC_OscConfig+0x334>)
 800169a:	400a      	ands	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	4b9f      	ldr	r3, [pc, #636]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b9e      	ldr	r3, [pc, #632]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80016a4:	499f      	ldr	r1, [pc, #636]	; (8001924 <HAL_RCC_OscConfig+0x338>)
 80016a6:	400a      	ands	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d014      	beq.n	80016dc <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b2:	f7fe ffe5 	bl	8000680 <HAL_GetTick>
 80016b6:	0003      	movs	r3, r0
 80016b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7fe ffe0 	bl	8000680 <HAL_GetTick>
 80016c0:	0002      	movs	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e2ee      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ce:	4b93      	ldr	r3, [pc, #588]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	029b      	lsls	r3, r3, #10
 80016d6:	4013      	ands	r3, r2
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0xd0>
 80016da:	e015      	b.n	8001708 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7fe ffd0 	bl	8000680 <HAL_GetTick>
 80016e0:	0003      	movs	r3, r0
 80016e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e6:	f7fe ffcb 	bl	8000680 <HAL_GetTick>
 80016ea:	0002      	movs	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b64      	cmp	r3, #100	; 0x64
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e2d9      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f8:	4b88      	ldr	r3, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	029b      	lsls	r3, r3, #10
 8001700:	4013      	ands	r3, r2
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0xfa>
 8001704:	e000      	b.n	8001708 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001706:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2202      	movs	r2, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d100      	bne.n	8001714 <HAL_RCC_OscConfig+0x128>
 8001712:	e099      	b.n	8001848 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001714:	4b81      	ldr	r3, [pc, #516]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2238      	movs	r2, #56	; 0x38
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800171e:	4b7f      	ldr	r3, [pc, #508]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2203      	movs	r2, #3
 8001724:	4013      	ands	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2b10      	cmp	r3, #16
 800172c:	d102      	bne.n	8001734 <HAL_RCC_OscConfig+0x148>
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d002      	beq.n	800173a <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d135      	bne.n	80017a6 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173a:	4b78      	ldr	r3, [pc, #480]	; (800191c <HAL_RCC_OscConfig+0x330>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4013      	ands	r3, r2
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x166>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e2ac      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001752:	4b72      	ldr	r3, [pc, #456]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4a74      	ldr	r2, [pc, #464]	; (8001928 <HAL_RCC_OscConfig+0x33c>)
 8001758:	4013      	ands	r3, r2
 800175a:	0019      	movs	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	021a      	lsls	r2, r3, #8
 8001762:	4b6e      	ldr	r3, [pc, #440]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d112      	bne.n	8001794 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800176e:	4b6b      	ldr	r3, [pc, #428]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a6e      	ldr	r2, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x340>)
 8001774:	4013      	ands	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	4b67      	ldr	r3, [pc, #412]	; (800191c <HAL_RCC_OscConfig+0x330>)
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001782:	4b66      	ldr	r3, [pc, #408]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	0adb      	lsrs	r3, r3, #11
 8001788:	2207      	movs	r2, #7
 800178a:	4013      	ands	r3, r2
 800178c:	4a68      	ldr	r2, [pc, #416]	; (8001930 <HAL_RCC_OscConfig+0x344>)
 800178e:	40da      	lsrs	r2, r3
 8001790:	4b68      	ldr	r3, [pc, #416]	; (8001934 <HAL_RCC_OscConfig+0x348>)
 8001792:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x34c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0018      	movs	r0, r3
 800179a:	f7fe ff15 	bl	80005c8 <HAL_InitTick>
 800179e:	1e03      	subs	r3, r0, #0
 80017a0:	d051      	beq.n	8001846 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e282      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d030      	beq.n	8001810 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017ae:	4b5b      	ldr	r3, [pc, #364]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a5e      	ldr	r2, [pc, #376]	; (800192c <HAL_RCC_OscConfig+0x340>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	4b57      	ldr	r3, [pc, #348]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80017be:	430a      	orrs	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80017c2:	4b56      	ldr	r3, [pc, #344]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b55      	ldr	r3, [pc, #340]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	0049      	lsls	r1, r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7fe ff56 	bl	8000680 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017da:	f7fe ff51 	bl	8000680 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e25f      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ec:	4b4b      	ldr	r3, [pc, #300]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4013      	ands	r3, r2
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	4b48      	ldr	r3, [pc, #288]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a4a      	ldr	r2, [pc, #296]	; (8001928 <HAL_RCC_OscConfig+0x33c>)
 80017fe:	4013      	ands	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	021a      	lsls	r2, r3, #8
 8001808:	4b44      	ldr	r3, [pc, #272]	; (800191c <HAL_RCC_OscConfig+0x330>)
 800180a:	430a      	orrs	r2, r1
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	e01b      	b.n	8001848 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001810:	4b42      	ldr	r3, [pc, #264]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001816:	4949      	ldr	r1, [pc, #292]	; (800193c <HAL_RCC_OscConfig+0x350>)
 8001818:	400a      	ands	r2, r1
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7fe ff30 	bl	8000680 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7fe ff2b 	bl	8000680 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e239      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001838:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_RCC_OscConfig+0x330>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4013      	ands	r3, r2
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x23a>
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001846:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2208      	movs	r2, #8
 800184e:	4013      	ands	r3, r2
 8001850:	d047      	beq.n	80018e2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001852:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2238      	movs	r2, #56	; 0x38
 8001858:	4013      	ands	r3, r2
 800185a:	2b18      	cmp	r3, #24
 800185c:	d10a      	bne.n	8001874 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800185e:	4b2f      	ldr	r3, [pc, #188]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001862:	2202      	movs	r2, #2
 8001864:	4013      	ands	r3, r2
 8001866:	d03c      	beq.n	80018e2 <HAL_RCC_OscConfig+0x2f6>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d138      	bne.n	80018e2 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e21b      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d019      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x330>)
 800187e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001882:	2101      	movs	r1, #1
 8001884:	430a      	orrs	r2, r1
 8001886:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7fe fefa 	bl	8000680 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001892:	f7fe fef5 	bl	8000680 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e203      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80018a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a8:	2202      	movs	r2, #2
 80018aa:	4013      	ands	r3, r2
 80018ac:	d0f1      	beq.n	8001892 <HAL_RCC_OscConfig+0x2a6>
 80018ae:	e018      	b.n	80018e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80018b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	438a      	bics	r2, r1
 80018ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7fe fee0 	bl	8000680 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c6:	f7fe fedb 	bl	8000680 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1e9      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80018da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018dc:	2202      	movs	r2, #2
 80018de:	4013      	ands	r3, r2
 80018e0:	d1f1      	bne.n	80018c6 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2204      	movs	r2, #4
 80018e8:	4013      	ands	r3, r2
 80018ea:	d100      	bne.n	80018ee <HAL_RCC_OscConfig+0x302>
 80018ec:	e0c6      	b.n	8001a7c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ee:	231f      	movs	r3, #31
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_RCC_OscConfig+0x330>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2238      	movs	r2, #56	; 0x38
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b20      	cmp	r3, #32
 8001900:	d11e      	bne.n	8001940 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2202      	movs	r2, #2
 8001908:	4013      	ands	r3, r2
 800190a:	d100      	bne.n	800190e <HAL_RCC_OscConfig+0x322>
 800190c:	e0b6      	b.n	8001a7c <HAL_RCC_OscConfig+0x490>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d000      	beq.n	8001918 <HAL_RCC_OscConfig+0x32c>
 8001916:	e0b1      	b.n	8001a7c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e1c7      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
 800191c:	40021000 	.word	0x40021000
 8001920:	fffeffff 	.word	0xfffeffff
 8001924:	fffbffff 	.word	0xfffbffff
 8001928:	ffff80ff 	.word	0xffff80ff
 800192c:	ffffc7ff 	.word	0xffffc7ff
 8001930:	00f42400 	.word	0x00f42400
 8001934:	20000008 	.word	0x20000008
 8001938:	2000000c 	.word	0x2000000c
 800193c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001940:	4bb8      	ldr	r3, [pc, #736]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	055b      	lsls	r3, r3, #21
 8001948:	4013      	ands	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_RCC_OscConfig+0x364>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x366>
 8001950:	2300      	movs	r3, #0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d011      	beq.n	800197a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4bb3      	ldr	r3, [pc, #716]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800195a:	4bb2      	ldr	r3, [pc, #712]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 800195c:	2180      	movs	r1, #128	; 0x80
 800195e:	0549      	lsls	r1, r1, #21
 8001960:	430a      	orrs	r2, r1
 8001962:	63da      	str	r2, [r3, #60]	; 0x3c
 8001964:	4baf      	ldr	r3, [pc, #700]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	055b      	lsls	r3, r3, #21
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001972:	231f      	movs	r3, #31
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197a:	4bab      	ldr	r3, [pc, #684]	; (8001c28 <HAL_RCC_OscConfig+0x63c>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4013      	ands	r3, r2
 8001984:	d11a      	bne.n	80019bc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001986:	4ba8      	ldr	r3, [pc, #672]	; (8001c28 <HAL_RCC_OscConfig+0x63c>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4ba7      	ldr	r3, [pc, #668]	; (8001c28 <HAL_RCC_OscConfig+0x63c>)
 800198c:	2180      	movs	r1, #128	; 0x80
 800198e:	0049      	lsls	r1, r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001994:	f7fe fe74 	bl	8000680 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199e:	f7fe fe6f 	bl	8000680 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e17d      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b0:	4b9d      	ldr	r3, [pc, #628]	; (8001c28 <HAL_RCC_OscConfig+0x63c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4013      	ands	r3, r2
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x3e6>
 80019c4:	4b97      	ldr	r3, [pc, #604]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 80019c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019c8:	4b96      	ldr	r3, [pc, #600]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 80019ca:	2101      	movs	r1, #1
 80019cc:	430a      	orrs	r2, r1
 80019ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80019d0:	e01c      	b.n	8001a0c <HAL_RCC_OscConfig+0x420>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x408>
 80019da:	4b92      	ldr	r3, [pc, #584]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 80019dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019de:	4b91      	ldr	r3, [pc, #580]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 80019e0:	2104      	movs	r1, #4
 80019e2:	430a      	orrs	r2, r1
 80019e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80019e6:	4b8f      	ldr	r3, [pc, #572]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 80019e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ea:	4b8e      	ldr	r3, [pc, #568]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	430a      	orrs	r2, r1
 80019f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0x420>
 80019f4:	4b8b      	ldr	r3, [pc, #556]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 80019f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019f8:	4b8a      	ldr	r3, [pc, #552]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	438a      	bics	r2, r1
 80019fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a00:	4b88      	ldr	r3, [pc, #544]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001a02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a04:	4b87      	ldr	r3, [pc, #540]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001a06:	2104      	movs	r1, #4
 8001a08:	438a      	bics	r2, r1
 8001a0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d014      	beq.n	8001a3e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7fe fe34 	bl	8000680 <HAL_GetTick>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1c:	e009      	b.n	8001a32 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7fe fe2f 	bl	8000680 <HAL_GetTick>
 8001a22:	0002      	movs	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	4a80      	ldr	r2, [pc, #512]	; (8001c2c <HAL_RCC_OscConfig+0x640>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e13c      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a32:	4b7c      	ldr	r3, [pc, #496]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	2202      	movs	r2, #2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x432>
 8001a3c:	e013      	b.n	8001a66 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7fe fe1f 	bl	8000680 <HAL_GetTick>
 8001a42:	0003      	movs	r3, r0
 8001a44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a46:	e009      	b.n	8001a5c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a48:	f7fe fe1a 	bl	8000680 <HAL_GetTick>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	4a76      	ldr	r2, [pc, #472]	; (8001c2c <HAL_RCC_OscConfig+0x640>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e127      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a5c:	4b71      	ldr	r3, [pc, #452]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	2202      	movs	r2, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a66:	231f      	movs	r3, #31
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a70:	4b6c      	ldr	r3, [pc, #432]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a74:	4b6b      	ldr	r3, [pc, #428]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001a76:	496e      	ldr	r1, [pc, #440]	; (8001c30 <HAL_RCC_OscConfig+0x644>)
 8001a78:	400a      	ands	r2, r1
 8001a7a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2220      	movs	r2, #32
 8001a82:	4013      	ands	r3, r2
 8001a84:	d039      	beq.n	8001afa <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d01b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a8e:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4b64      	ldr	r3, [pc, #400]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001a94:	2180      	movs	r1, #128	; 0x80
 8001a96:	03c9      	lsls	r1, r1, #15
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7fe fdf0 	bl	8000680 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa6:	f7fe fdeb 	bl	8000680 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e0f9      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ab8:	4b5a      	ldr	r3, [pc, #360]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x4ba>
 8001ac4:	e019      	b.n	8001afa <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ac6:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001acc:	4959      	ldr	r1, [pc, #356]	; (8001c34 <HAL_RCC_OscConfig+0x648>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad2:	f7fe fdd5 	bl	8000680 <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001adc:	f7fe fdd0 	bl	8000680 <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0de      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001aee:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	4013      	ands	r3, r2
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d100      	bne.n	8001b04 <HAL_RCC_OscConfig+0x518>
 8001b02:	e0d2      	b.n	8001caa <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b04:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2238      	movs	r2, #56	; 0x38
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b10      	cmp	r3, #16
 8001b0e:	d100      	bne.n	8001b12 <HAL_RCC_OscConfig+0x526>
 8001b10:	e081      	b.n	8001c16 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d156      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	4b42      	ldr	r3, [pc, #264]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001b20:	4945      	ldr	r1, [pc, #276]	; (8001c38 <HAL_RCC_OscConfig+0x64c>)
 8001b22:	400a      	ands	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7fe fdab 	bl	8000680 <HAL_GetTick>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7fe fda6 	bl	8000680 <HAL_GetTick>
 8001b34:	0002      	movs	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e0b4      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	049b      	lsls	r3, r3, #18
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b4e:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	4a3a      	ldr	r2, [pc, #232]	; (8001c3c <HAL_RCC_OscConfig+0x650>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	0019      	movs	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	0449      	lsls	r1, r1, #17
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	0549      	lsls	r1, r1, #21
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7fe fd6f 	bl	8000680 <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7fe fd6a 	bl	8000680 <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e078      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	049b      	lsls	r3, r3, #18
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x5bc>
 8001bc6:	e070      	b.n	8001caa <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001bce:	491a      	ldr	r1, [pc, #104]	; (8001c38 <HAL_RCC_OscConfig+0x64c>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001bda:	2103      	movs	r1, #3
 8001bdc:	438a      	bics	r2, r1
 8001bde:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001be6:	4916      	ldr	r1, [pc, #88]	; (8001c40 <HAL_RCC_OscConfig+0x654>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe fd48 	bl	8000680 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7fe fd43 	bl	8000680 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e051      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_RCC_OscConfig+0x638>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	049b      	lsls	r3, r3, #18
 8001c10:	4013      	ands	r3, r2
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x60a>
 8001c14:	e049      	b.n	8001caa <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d112      	bne.n	8001c44 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e044      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	00001388 	.word	0x00001388
 8001c30:	efffffff 	.word	0xefffffff
 8001c34:	ffbfffff 	.word	0xffbfffff
 8001c38:	feffffff 	.word	0xfeffffff
 8001c3c:	11c1808c 	.word	0x11c1808c
 8001c40:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x6c8>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	401a      	ands	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d126      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2270      	movs	r2, #112	; 0x70
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d11f      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	23fe      	movs	r3, #254	; 0xfe
 8001c6a:	01db      	lsls	r3, r3, #7
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d116      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	23f8      	movs	r3, #248	; 0xf8
 8001c7c:	039b      	lsls	r3, r3, #14
 8001c7e:	401a      	ands	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d10e      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	23e0      	movs	r3, #224	; 0xe0
 8001c8c:	051b      	lsls	r3, r3, #20
 8001c8e:	401a      	ands	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	0f5b      	lsrs	r3, r3, #29
 8001c9c:	075a      	lsls	r2, r3, #29
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b008      	add	sp, #32
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0e9      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d91e      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b73      	ldr	r3, [pc, #460]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2207      	movs	r2, #7
 8001ce0:	4393      	bics	r3, r2
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	4b70      	ldr	r3, [pc, #448]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cec:	f7fe fcc8 	bl	8000680 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cf4:	e009      	b.n	8001d0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf6:	f7fe fcc3 	bl	8000680 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4a6a      	ldr	r2, [pc, #424]	; (8001eac <HAL_RCC_ClockConfig+0x1f4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0ca      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d0a:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2207      	movs	r2, #7
 8001d10:	4013      	ands	r3, r2
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1ee      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d015      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2204      	movs	r2, #4
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d006      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d2c:	4b60      	ldr	r3, [pc, #384]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d32:	21e0      	movs	r1, #224	; 0xe0
 8001d34:	01c9      	lsls	r1, r1, #7
 8001d36:	430a      	orrs	r2, r1
 8001d38:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4a5d      	ldr	r2, [pc, #372]	; (8001eb4 <HAL_RCC_ClockConfig+0x1fc>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	0019      	movs	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2201      	movs	r2, #1
 8001d54:	4013      	ands	r3, r2
 8001d56:	d057      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	029b      	lsls	r3, r3, #10
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d12b      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e097      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d107      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d78:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	049b      	lsls	r3, r3, #18
 8001d80:	4013      	ands	r3, r2
 8001d82:	d11f      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e08b      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d90:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d113      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e07f      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	2202      	movs	r2, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e074      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db6:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dba:	2202      	movs	r2, #2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e06d      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2207      	movs	r2, #7
 8001dca:	4393      	bics	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4b37      	ldr	r3, [pc, #220]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd8:	f7fe fc52 	bl	8000680 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de0:	e009      	b.n	8001df6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de2:	f7fe fc4d 	bl	8000680 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a2f      	ldr	r2, [pc, #188]	; (8001eac <HAL_RCC_ClockConfig+0x1f4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e054      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2238      	movs	r2, #56	; 0x38
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1ec      	bne.n	8001de2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	4013      	ands	r3, r2
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d21e      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e28:	f7fe fc2a 	bl	8000680 <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e30:	e009      	b.n	8001e46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e32:	f7fe fc25 	bl	8000680 <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_RCC_ClockConfig+0x1f4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e02c      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d1ee      	bne.n	8001e32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d009      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <HAL_RCC_ClockConfig+0x200>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	0019      	movs	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e72:	f000 f829 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e76:	0001      	movs	r1, r0
 8001e78:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	220f      	movs	r2, #15
 8001e80:	401a      	ands	r2, r3
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_RCC_ClockConfig+0x204>)
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	58d3      	ldr	r3, [r2, r3]
 8001e88:	221f      	movs	r2, #31
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	000a      	movs	r2, r1
 8001e8e:	40da      	lsrs	r2, r3
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_ClockConfig+0x208>)
 8001e92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x20c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7fe fb95 	bl	80005c8 <HAL_InitTick>
 8001e9e:	0003      	movs	r3, r0
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b004      	add	sp, #16
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	00001388 	.word	0x00001388
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	fffff0ff 	.word	0xfffff0ff
 8001eb8:	ffff8fff 	.word	0xffff8fff
 8001ebc:	080024b4 	.word	0x080024b4
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	2000000c 	.word	0x2000000c

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ece:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2238      	movs	r2, #56	; 0x38
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d10f      	bne.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0adb      	lsrs	r3, r3, #11
 8001ede:	2207      	movs	r2, #7
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	4835      	ldr	r0, [pc, #212]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001eee:	f7fe f909 	bl	8000104 <__udivsi3>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	e05d      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef8:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2238      	movs	r2, #56	; 0x38
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d102      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f04:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e054      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2238      	movs	r2, #56	; 0x38
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d138      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	2207      	movs	r2, #7
 8001f28:	4013      	ands	r3, r2
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d10d      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	4824      	ldr	r0, [pc, #144]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f38:	f7fe f8e4 	bl	8000104 <__udivsi3>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	0019      	movs	r1, r3
 8001f40:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	227f      	movs	r2, #127	; 0x7f
 8001f48:	4013      	ands	r3, r2
 8001f4a:	434b      	muls	r3, r1
 8001f4c:	617b      	str	r3, [r7, #20]
        break;
 8001f4e:	e00d      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	481c      	ldr	r0, [pc, #112]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f54:	f7fe f8d6 	bl	8000104 <__udivsi3>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	227f      	movs	r2, #127	; 0x7f
 8001f64:	4013      	ands	r3, r2
 8001f66:	434b      	muls	r3, r1
 8001f68:	617b      	str	r3, [r7, #20]
        break;
 8001f6a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0f5b      	lsrs	r3, r3, #29
 8001f72:	2207      	movs	r2, #7
 8001f74:	4013      	ands	r3, r2
 8001f76:	3301      	adds	r3, #1
 8001f78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	6978      	ldr	r0, [r7, #20]
 8001f7e:	f7fe f8c1 	bl	8000104 <__udivsi3>
 8001f82:	0003      	movs	r3, r0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	e015      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2238      	movs	r2, #56	; 0x38
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d103      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2238      	movs	r2, #56	; 0x38
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b18      	cmp	r3, #24
 8001fa6:	d103      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fa8:	23fa      	movs	r3, #250	; 0xfa
 8001faa:	01db      	lsls	r3, r3, #7
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	e001      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fb4:	693b      	ldr	r3, [r7, #16]
}
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b006      	add	sp, #24
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001fd4:	2313      	movs	r3, #19
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fdc:	2312      	movs	r3, #18
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	029b      	lsls	r3, r3, #10
 8001fec:	4013      	ands	r3, r2
 8001fee:	d100      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ff0:	e0ad      	b.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff2:	2011      	movs	r0, #17
 8001ff4:	183b      	adds	r3, r7, r0
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	055b      	lsls	r3, r3, #21
 8002002:	4013      	ands	r3, r2
 8002004:	d110      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b44      	ldr	r3, [pc, #272]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800200a:	4b43      	ldr	r3, [pc, #268]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	0549      	lsls	r1, r1, #21
 8002010:	430a      	orrs	r2, r1
 8002012:	63da      	str	r2, [r3, #60]	; 0x3c
 8002014:	4b40      	ldr	r3, [pc, #256]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	055b      	lsls	r3, r3, #21
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002022:	183b      	adds	r3, r7, r0
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002028:	4b3c      	ldr	r3, [pc, #240]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b3b      	ldr	r3, [pc, #236]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	0049      	lsls	r1, r1, #1
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002036:	f7fe fb23 	bl	8000680 <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800203e:	e00b      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002040:	f7fe fb1e 	bl	8000680 <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d904      	bls.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800204e:	2313      	movs	r3, #19
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	2203      	movs	r2, #3
 8002054:	701a      	strb	r2, [r3, #0]
        break;
 8002056:	e005      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002058:	4b30      	ldr	r3, [pc, #192]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4013      	ands	r3, r2
 8002062:	d0ed      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002064:	2313      	movs	r3, #19
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d15e      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002070:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002072:	23c0      	movs	r3, #192	; 0xc0
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4013      	ands	r3, r2
 8002078:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d019      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	429a      	cmp	r2, r3
 8002088:	d014      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	4a24      	ldr	r2, [pc, #144]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002090:	4013      	ands	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002096:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002098:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800209a:	2180      	movs	r1, #128	; 0x80
 800209c:	0249      	lsls	r1, r1, #9
 800209e:	430a      	orrs	r2, r1
 80020a0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020a2:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020a8:	491e      	ldr	r1, [pc, #120]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80020aa:	400a      	ands	r2, r1
 80020ac:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020ae:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2201      	movs	r2, #1
 80020b8:	4013      	ands	r3, r2
 80020ba:	d016      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe fae0 	bl	8000680 <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c4:	e00c      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7fe fadb 	bl	8000680 <HAL_GetTick>
 80020ca:	0002      	movs	r2, r0
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	4a15      	ldr	r2, [pc, #84]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d904      	bls.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80020d6:	2313      	movs	r3, #19
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	2203      	movs	r2, #3
 80020dc:	701a      	strb	r2, [r3, #0]
            break;
 80020de:	e004      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	2202      	movs	r2, #2
 80020e6:	4013      	ands	r3, r2
 80020e8:	d0ed      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80020ea:	2313      	movs	r3, #19
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10a      	bne.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f8:	4a09      	ldr	r2, [pc, #36]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002104:	430a      	orrs	r2, r1
 8002106:	65da      	str	r2, [r3, #92]	; 0x5c
 8002108:	e016      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800210a:	2312      	movs	r3, #18
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	2213      	movs	r2, #19
 8002110:	18ba      	adds	r2, r7, r2
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e00f      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002118:	40021000 	.word	0x40021000
 800211c:	40007000 	.word	0x40007000
 8002120:	fffffcff 	.word	0xfffffcff
 8002124:	fffeffff 	.word	0xfffeffff
 8002128:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800212c:	2312      	movs	r3, #18
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2213      	movs	r2, #19
 8002132:	18ba      	adds	r2, r7, r2
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002138:	2311      	movs	r3, #17
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d105      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002142:	4bb6      	ldr	r3, [pc, #728]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002146:	4bb5      	ldr	r3, [pc, #724]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002148:	49b5      	ldr	r1, [pc, #724]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800214a:	400a      	ands	r2, r1
 800214c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2201      	movs	r2, #1
 8002154:	4013      	ands	r3, r2
 8002156:	d009      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002158:	4bb0      	ldr	r3, [pc, #704]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215c:	2203      	movs	r2, #3
 800215e:	4393      	bics	r3, r2
 8002160:	0019      	movs	r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4bad      	ldr	r3, [pc, #692]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002168:	430a      	orrs	r2, r1
 800216a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2202      	movs	r2, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002176:	4ba9      	ldr	r3, [pc, #676]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	220c      	movs	r2, #12
 800217c:	4393      	bics	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	4ba5      	ldr	r3, [pc, #660]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002186:	430a      	orrs	r2, r1
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2204      	movs	r2, #4
 8002190:	4013      	ands	r3, r2
 8002192:	d009      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002194:	4ba1      	ldr	r3, [pc, #644]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	2230      	movs	r2, #48	; 0x30
 800219a:	4393      	bics	r3, r2
 800219c:	0019      	movs	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	4b9e      	ldr	r3, [pc, #632]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2210      	movs	r2, #16
 80021ae:	4013      	ands	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021b2:	4b9a      	ldr	r3, [pc, #616]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	4a9b      	ldr	r2, [pc, #620]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	4b96      	ldr	r3, [pc, #600]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	015b      	lsls	r3, r3, #5
 80021ce:	4013      	ands	r3, r2
 80021d0:	d009      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80021d2:	4b92      	ldr	r3, [pc, #584]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	4a94      	ldr	r2, [pc, #592]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021d8:	4013      	ands	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	4b8e      	ldr	r3, [pc, #568]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021e2:	430a      	orrs	r2, r1
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4013      	ands	r3, r2
 80021f0:	d009      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021f2:	4b8a      	ldr	r3, [pc, #552]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	4a8d      	ldr	r2, [pc, #564]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	0019      	movs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002200:	4b86      	ldr	r3, [pc, #536]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002202:	430a      	orrs	r2, r1
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4013      	ands	r3, r2
 8002210:	d009      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002212:	4b82      	ldr	r3, [pc, #520]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	4a86      	ldr	r2, [pc, #536]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002218:	4013      	ands	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	4b7e      	ldr	r3, [pc, #504]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002222:	430a      	orrs	r2, r1
 8002224:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2220      	movs	r2, #32
 800222c:	4013      	ands	r3, r2
 800222e:	d009      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002230:	4b7a      	ldr	r3, [pc, #488]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	4a7f      	ldr	r2, [pc, #508]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002236:	4013      	ands	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	4b77      	ldr	r3, [pc, #476]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002240:	430a      	orrs	r2, r1
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2240      	movs	r2, #64	; 0x40
 800224a:	4013      	ands	r3, r2
 800224c:	d009      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800224e:	4b73      	ldr	r3, [pc, #460]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	4a79      	ldr	r2, [pc, #484]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002254:	4013      	ands	r3, r2
 8002256:	0019      	movs	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69da      	ldr	r2, [r3, #28]
 800225c:	4b6f      	ldr	r3, [pc, #444]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800225e:	430a      	orrs	r2, r1
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	01db      	lsls	r3, r3, #7
 800226a:	4013      	ands	r3, r2
 800226c:	d015      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800226e:	4b6b      	ldr	r3, [pc, #428]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	0899      	lsrs	r1, r3, #2
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800227a:	4b68      	ldr	r3, [pc, #416]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800227c:	430a      	orrs	r2, r1
 800227e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	05db      	lsls	r3, r3, #23
 8002288:	429a      	cmp	r2, r3
 800228a:	d106      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800228c:	4b63      	ldr	r3, [pc, #396]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	4b62      	ldr	r3, [pc, #392]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	0249      	lsls	r1, r1, #9
 8002296:	430a      	orrs	r2, r1
 8002298:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	031b      	lsls	r3, r3, #12
 80022a2:	4013      	ands	r3, r2
 80022a4:	d009      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022a6:	4b5d      	ldr	r3, [pc, #372]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	2240      	movs	r2, #64	; 0x40
 80022ac:	4393      	bics	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022b6:	430a      	orrs	r2, r1
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	039b      	lsls	r3, r3, #14
 80022c2:	4013      	ands	r3, r2
 80022c4:	d016      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022c6:	4b55      	ldr	r3, [pc, #340]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	4a5c      	ldr	r2, [pc, #368]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d4:	4b51      	ldr	r3, [pc, #324]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022d6:	430a      	orrs	r2, r1
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	03db      	lsls	r3, r3, #15
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d106      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022e6:	4b4d      	ldr	r3, [pc, #308]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	4b4c      	ldr	r3, [pc, #304]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	0449      	lsls	r1, r1, #17
 80022f0:	430a      	orrs	r2, r1
 80022f2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	03db      	lsls	r3, r3, #15
 80022fc:	4013      	ands	r3, r2
 80022fe:	d016      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002300:	4b46      	ldr	r3, [pc, #280]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	4a4e      	ldr	r2, [pc, #312]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002306:	4013      	ands	r3, r2
 8002308:	0019      	movs	r1, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800230e:	4b43      	ldr	r3, [pc, #268]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002310:	430a      	orrs	r2, r1
 8002312:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	045b      	lsls	r3, r3, #17
 800231c:	429a      	cmp	r2, r3
 800231e:	d106      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002320:	4b3e      	ldr	r3, [pc, #248]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	4b3d      	ldr	r3, [pc, #244]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002326:	2180      	movs	r1, #128	; 0x80
 8002328:	0449      	lsls	r1, r1, #17
 800232a:	430a      	orrs	r2, r1
 800232c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	4013      	ands	r3, r2
 8002338:	d014      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800233a:	4b38      	ldr	r3, [pc, #224]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	2203      	movs	r2, #3
 8002340:	4393      	bics	r3, r2
 8002342:	0019      	movs	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1a      	ldr	r2, [r3, #32]
 8002348:	4b34      	ldr	r3, [pc, #208]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800234a:	430a      	orrs	r2, r1
 800234c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d106      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002356:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0249      	lsls	r1, r1, #9
 8002360:	430a      	orrs	r2, r1
 8002362:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	019b      	lsls	r3, r3, #6
 800236c:	4013      	ands	r3, r2
 800236e:	d014      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002370:	4b2a      	ldr	r3, [pc, #168]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	220c      	movs	r2, #12
 8002376:	4393      	bics	r3, r2
 8002378:	0019      	movs	r1, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237e:	4b27      	ldr	r3, [pc, #156]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002380:	430a      	orrs	r2, r1
 8002382:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2b04      	cmp	r3, #4
 800238a:	d106      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800238c:	4b23      	ldr	r3, [pc, #140]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	0249      	lsls	r1, r1, #9
 8002396:	430a      	orrs	r2, r1
 8002398:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	045b      	lsls	r3, r3, #17
 80023a2:	4013      	ands	r3, r2
 80023a4:	d016      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	4a22      	ldr	r2, [pc, #136]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	019b      	lsls	r3, r3, #6
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d106      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	0449      	lsls	r1, r1, #17
 80023d0:	430a      	orrs	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	049b      	lsls	r3, r3, #18
 80023dc:	4013      	ands	r3, r2
 80023de:	d016      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	4a10      	ldr	r2, [pc, #64]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	0019      	movs	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023f0:	430a      	orrs	r2, r1
 80023f2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d106      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	0449      	lsls	r1, r1, #17
 800240a:	430a      	orrs	r2, r1
 800240c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800240e:	2312      	movs	r3, #18
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	781b      	ldrb	r3, [r3, #0]
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b006      	add	sp, #24
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	efffffff 	.word	0xefffffff
 8002424:	fffff3ff 	.word	0xfffff3ff
 8002428:	fffffcff 	.word	0xfffffcff
 800242c:	fff3ffff 	.word	0xfff3ffff
 8002430:	ffcfffff 	.word	0xffcfffff
 8002434:	ffffcfff 	.word	0xffffcfff
 8002438:	ffff3fff 	.word	0xffff3fff
 800243c:	ffbfffff 	.word	0xffbfffff
 8002440:	feffffff 	.word	0xfeffffff

08002444 <__libc_init_array>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	2600      	movs	r6, #0
 8002448:	4d0c      	ldr	r5, [pc, #48]	; (800247c <__libc_init_array+0x38>)
 800244a:	4c0d      	ldr	r4, [pc, #52]	; (8002480 <__libc_init_array+0x3c>)
 800244c:	1b64      	subs	r4, r4, r5
 800244e:	10a4      	asrs	r4, r4, #2
 8002450:	42a6      	cmp	r6, r4
 8002452:	d109      	bne.n	8002468 <__libc_init_array+0x24>
 8002454:	2600      	movs	r6, #0
 8002456:	f000 f821 	bl	800249c <_init>
 800245a:	4d0a      	ldr	r5, [pc, #40]	; (8002484 <__libc_init_array+0x40>)
 800245c:	4c0a      	ldr	r4, [pc, #40]	; (8002488 <__libc_init_array+0x44>)
 800245e:	1b64      	subs	r4, r4, r5
 8002460:	10a4      	asrs	r4, r4, #2
 8002462:	42a6      	cmp	r6, r4
 8002464:	d105      	bne.n	8002472 <__libc_init_array+0x2e>
 8002466:	bd70      	pop	{r4, r5, r6, pc}
 8002468:	00b3      	lsls	r3, r6, #2
 800246a:	58eb      	ldr	r3, [r5, r3]
 800246c:	4798      	blx	r3
 800246e:	3601      	adds	r6, #1
 8002470:	e7ee      	b.n	8002450 <__libc_init_array+0xc>
 8002472:	00b3      	lsls	r3, r6, #2
 8002474:	58eb      	ldr	r3, [r5, r3]
 8002476:	4798      	blx	r3
 8002478:	3601      	adds	r6, #1
 800247a:	e7f2      	b.n	8002462 <__libc_init_array+0x1e>
 800247c:	080024f4 	.word	0x080024f4
 8002480:	080024f4 	.word	0x080024f4
 8002484:	080024f4 	.word	0x080024f4
 8002488:	080024f8 	.word	0x080024f8

0800248c <memset>:
 800248c:	0003      	movs	r3, r0
 800248e:	1882      	adds	r2, r0, r2
 8002490:	4293      	cmp	r3, r2
 8002492:	d100      	bne.n	8002496 <memset+0xa>
 8002494:	4770      	bx	lr
 8002496:	7019      	strb	r1, [r3, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	e7f9      	b.n	8002490 <memset+0x4>

0800249c <_init>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr

080024a8 <_fini>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr
