
littles_villas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cf8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08001db4  08001db4  00011db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e34  08001e34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e34  08001e34  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e34  08001e34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e34  08001e34  00011e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  08001e48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001e48  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000047c6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001166  00000000  00000000  000247fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000518  00000000  00000000  00025960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000480  00000000  00000000  00025e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019741  00000000  00000000  000262f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000056ad  00000000  00000000  0003fa39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a51a0  00000000  00000000  000450e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea286  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000105c  00000000  00000000  000ea2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001d9c 	.word	0x08001d9c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001d9c 	.word	0x08001d9c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fd6a 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 fbac 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 fc08 	bl	8000a3c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  delay_ms = 1;
 800022c:	4bf7      	ldr	r3, [pc, #988]	; (800060c <main+0x3f0>)
 800022e:	2201      	movs	r2, #1
 8000230:	601a      	str	r2, [r3, #0]
  while (1)
  {
	p_1 = HAL_GPIO_ReadPin(DIP_1_GPIO_Port, DIP_1_Pin)*8;
 8000232:	2380      	movs	r3, #128	; 0x80
 8000234:	019b      	lsls	r3, r3, #6
 8000236:	4af6      	ldr	r2, [pc, #984]	; (8000610 <main+0x3f4>)
 8000238:	0019      	movs	r1, r3
 800023a:	0010      	movs	r0, r2
 800023c:	f001 f818 	bl	8001270 <HAL_GPIO_ReadPin>
 8000240:	0003      	movs	r3, r0
 8000242:	00db      	lsls	r3, r3, #3
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4bf3      	ldr	r3, [pc, #972]	; (8000614 <main+0x3f8>)
 8000248:	701a      	strb	r2, [r3, #0]
	p_2 = HAL_GPIO_ReadPin(DIP_2_GPIO_Port, DIP_2_Pin)*4;
 800024a:	23a0      	movs	r3, #160	; 0xa0
 800024c:	05db      	lsls	r3, r3, #23
 800024e:	2104      	movs	r1, #4
 8000250:	0018      	movs	r0, r3
 8000252:	f001 f80d 	bl	8001270 <HAL_GPIO_ReadPin>
 8000256:	0003      	movs	r3, r0
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	b2da      	uxtb	r2, r3
 800025c:	4bee      	ldr	r3, [pc, #952]	; (8000618 <main+0x3fc>)
 800025e:	701a      	strb	r2, [r3, #0]
	p_3 = HAL_GPIO_ReadPin(DIP_3_GPIO_Port, DIP_3_Pin)*2;
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	4aed      	ldr	r2, [pc, #948]	; (800061c <main+0x400>)
 8000266:	0019      	movs	r1, r3
 8000268:	0010      	movs	r0, r2
 800026a:	f001 f801 	bl	8001270 <HAL_GPIO_ReadPin>
 800026e:	0003      	movs	r3, r0
 8000270:	18db      	adds	r3, r3, r3
 8000272:	b2da      	uxtb	r2, r3
 8000274:	4bea      	ldr	r3, [pc, #936]	; (8000620 <main+0x404>)
 8000276:	701a      	strb	r2, [r3, #0]
	p_4 = HAL_GPIO_ReadPin(DIP_4_GPIO_Port, DIP_4_Pin)*1;
 8000278:	2380      	movs	r3, #128	; 0x80
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	4ae7      	ldr	r2, [pc, #924]	; (800061c <main+0x400>)
 800027e:	0019      	movs	r1, r3
 8000280:	0010      	movs	r0, r2
 8000282:	f000 fff5 	bl	8001270 <HAL_GPIO_ReadPin>
 8000286:	0003      	movs	r3, r0
 8000288:	001a      	movs	r2, r3
 800028a:	4be6      	ldr	r3, [pc, #920]	; (8000624 <main+0x408>)
 800028c:	701a      	strb	r2, [r3, #0]

	soma = p_1 + p_2 + p_3 + p_4;
 800028e:	4be1      	ldr	r3, [pc, #900]	; (8000614 <main+0x3f8>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	b29a      	uxth	r2, r3
 8000294:	4be0      	ldr	r3, [pc, #896]	; (8000618 <main+0x3fc>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	b29b      	uxth	r3, r3
 800029a:	18d3      	adds	r3, r2, r3
 800029c:	b29a      	uxth	r2, r3
 800029e:	4be0      	ldr	r3, [pc, #896]	; (8000620 <main+0x404>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	18d3      	adds	r3, r2, r3
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	4bde      	ldr	r3, [pc, #888]	; (8000624 <main+0x408>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	18d3      	adds	r3, r2, r3
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	4bdd      	ldr	r3, [pc, #884]	; (8000628 <main+0x40c>)
 80002b4:	801a      	strh	r2, [r3, #0]

	  switch(soma) {
 80002b6:	4bdc      	ldr	r3, [pc, #880]	; (8000628 <main+0x40c>)
 80002b8:	881b      	ldrh	r3, [r3, #0]
 80002ba:	2b0f      	cmp	r3, #15
 80002bc:	d900      	bls.n	80002c0 <main+0xa4>
 80002be:	e359      	b.n	8000974 <main+0x758>
 80002c0:	009a      	lsls	r2, r3, #2
 80002c2:	4bda      	ldr	r3, [pc, #872]	; (800062c <main+0x410>)
 80002c4:	18d3      	adds	r3, r2, r3
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	469f      	mov	pc, r3
	  	  case 0:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 80002ca:	2380      	movs	r3, #128	; 0x80
 80002cc:	01db      	lsls	r3, r3, #7
 80002ce:	48d0      	ldr	r0, [pc, #832]	; (8000610 <main+0x3f4>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	0019      	movs	r1, r3
 80002d4:	f000 ffe9 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 80002d8:	4bcd      	ldr	r3, [pc, #820]	; (8000610 <main+0x3f4>)
 80002da:	2201      	movs	r2, #1
 80002dc:	2110      	movs	r1, #16
 80002de:	0018      	movs	r0, r3
 80002e0:	f000 ffe3 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 80002e4:	4bca      	ldr	r3, [pc, #808]	; (8000610 <main+0x3f4>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	2120      	movs	r1, #32
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 ffdd 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 80002f0:	4bc7      	ldr	r3, [pc, #796]	; (8000610 <main+0x3f4>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	2108      	movs	r1, #8
 80002f6:	0018      	movs	r0, r3
 80002f8:	f000 ffd7 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 80002fc:	4bcc      	ldr	r3, [pc, #816]	; (8000630 <main+0x414>)
 80002fe:	2201      	movs	r2, #1
 8000300:	2180      	movs	r1, #128	; 0x80
 8000302:	0018      	movs	r0, r3
 8000304:	f000 ffd1 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 8000308:	4bc1      	ldr	r3, [pc, #772]	; (8000610 <main+0x3f4>)
 800030a:	2201      	movs	r2, #1
 800030c:	2101      	movs	r1, #1
 800030e:	0018      	movs	r0, r3
 8000310:	f000 ffcb 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 8000314:	23a0      	movs	r3, #160	; 0xa0
 8000316:	05db      	lsls	r3, r3, #23
 8000318:	2201      	movs	r2, #1
 800031a:	2180      	movs	r1, #128	; 0x80
 800031c:	0018      	movs	r0, r3
 800031e:	f000 ffc4 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 0);
 8000322:	23a0      	movs	r3, #160	; 0xa0
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	2200      	movs	r2, #0
 8000328:	2140      	movs	r1, #64	; 0x40
 800032a:	0018      	movs	r0, r3
 800032c:	f000 ffbd 	bl	80012aa <HAL_GPIO_WritePin>
		  	  break;
 8000330:	e321      	b.n	8000976 <main+0x75a>

	  	  case 1:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 0);
 8000332:	2380      	movs	r3, #128	; 0x80
 8000334:	01db      	lsls	r3, r3, #7
 8000336:	48b6      	ldr	r0, [pc, #728]	; (8000610 <main+0x3f4>)
 8000338:	2200      	movs	r2, #0
 800033a:	0019      	movs	r1, r3
 800033c:	f000 ffb5 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 0);
 8000340:	4bb3      	ldr	r3, [pc, #716]	; (8000610 <main+0x3f4>)
 8000342:	2200      	movs	r2, #0
 8000344:	2110      	movs	r1, #16
 8000346:	0018      	movs	r0, r3
 8000348:	f000 ffaf 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 800034c:	4bb0      	ldr	r3, [pc, #704]	; (8000610 <main+0x3f4>)
 800034e:	2201      	movs	r2, #1
 8000350:	2120      	movs	r1, #32
 8000352:	0018      	movs	r0, r3
 8000354:	f000 ffa9 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 8000358:	4bad      	ldr	r3, [pc, #692]	; (8000610 <main+0x3f4>)
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	0018      	movs	r0, r3
 8000360:	f000 ffa3 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 8000364:	4bb2      	ldr	r3, [pc, #712]	; (8000630 <main+0x414>)
 8000366:	2201      	movs	r2, #1
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	0018      	movs	r0, r3
 800036c:	f000 ff9d 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 0);
 8000370:	4ba7      	ldr	r3, [pc, #668]	; (8000610 <main+0x3f4>)
 8000372:	2200      	movs	r2, #0
 8000374:	2101      	movs	r1, #1
 8000376:	0018      	movs	r0, r3
 8000378:	f000 ff97 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 0);
 800037c:	23a0      	movs	r3, #160	; 0xa0
 800037e:	05db      	lsls	r3, r3, #23
 8000380:	2200      	movs	r2, #0
 8000382:	2180      	movs	r1, #128	; 0x80
 8000384:	0018      	movs	r0, r3
 8000386:	f000 ff90 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 0);
 800038a:	23a0      	movs	r3, #160	; 0xa0
 800038c:	05db      	lsls	r3, r3, #23
 800038e:	2200      	movs	r2, #0
 8000390:	2140      	movs	r1, #64	; 0x40
 8000392:	0018      	movs	r0, r3
 8000394:	f000 ff89 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 8000398:	e2ed      	b.n	8000976 <main+0x75a>

	  	  case 2:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 800039a:	2380      	movs	r3, #128	; 0x80
 800039c:	01db      	lsls	r3, r3, #7
 800039e:	489c      	ldr	r0, [pc, #624]	; (8000610 <main+0x3f4>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	0019      	movs	r1, r3
 80003a4:	f000 ff81 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 80003a8:	4b99      	ldr	r3, [pc, #612]	; (8000610 <main+0x3f4>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	2110      	movs	r1, #16
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 ff7b 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 0);
 80003b4:	4b96      	ldr	r3, [pc, #600]	; (8000610 <main+0x3f4>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	2120      	movs	r1, #32
 80003ba:	0018      	movs	r0, r3
 80003bc:	f000 ff75 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 80003c0:	4b93      	ldr	r3, [pc, #588]	; (8000610 <main+0x3f4>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	2108      	movs	r1, #8
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 ff6f 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 80003cc:	4b98      	ldr	r3, [pc, #608]	; (8000630 <main+0x414>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	2180      	movs	r1, #128	; 0x80
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 ff69 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 80003d8:	4b8d      	ldr	r3, [pc, #564]	; (8000610 <main+0x3f4>)
 80003da:	2201      	movs	r2, #1
 80003dc:	2101      	movs	r1, #1
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 ff63 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 0);
 80003e4:	23a0      	movs	r3, #160	; 0xa0
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	2200      	movs	r2, #0
 80003ea:	2180      	movs	r1, #128	; 0x80
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 ff5c 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 80003f2:	23a0      	movs	r3, #160	; 0xa0
 80003f4:	05db      	lsls	r3, r3, #23
 80003f6:	2201      	movs	r2, #1
 80003f8:	2140      	movs	r1, #64	; 0x40
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 ff55 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 8000400:	e2b9      	b.n	8000976 <main+0x75a>

	  	  case 3:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 0);
 8000402:	2380      	movs	r3, #128	; 0x80
 8000404:	01db      	lsls	r3, r3, #7
 8000406:	4882      	ldr	r0, [pc, #520]	; (8000610 <main+0x3f4>)
 8000408:	2200      	movs	r2, #0
 800040a:	0019      	movs	r1, r3
 800040c:	f000 ff4d 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 8000410:	4b7f      	ldr	r3, [pc, #508]	; (8000610 <main+0x3f4>)
 8000412:	2201      	movs	r2, #1
 8000414:	2110      	movs	r1, #16
 8000416:	0018      	movs	r0, r3
 8000418:	f000 ff47 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 800041c:	4b7c      	ldr	r3, [pc, #496]	; (8000610 <main+0x3f4>)
 800041e:	2201      	movs	r2, #1
 8000420:	2120      	movs	r1, #32
 8000422:	0018      	movs	r0, r3
 8000424:	f000 ff41 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 8000428:	4b79      	ldr	r3, [pc, #484]	; (8000610 <main+0x3f4>)
 800042a:	2200      	movs	r2, #0
 800042c:	2108      	movs	r1, #8
 800042e:	0018      	movs	r0, r3
 8000430:	f000 ff3b 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 8000434:	4b7e      	ldr	r3, [pc, #504]	; (8000630 <main+0x414>)
 8000436:	2201      	movs	r2, #1
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	0018      	movs	r0, r3
 800043c:	f000 ff35 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 8000440:	4b73      	ldr	r3, [pc, #460]	; (8000610 <main+0x3f4>)
 8000442:	2201      	movs	r2, #1
 8000444:	2101      	movs	r1, #1
 8000446:	0018      	movs	r0, r3
 8000448:	f000 ff2f 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 0);
 800044c:	23a0      	movs	r3, #160	; 0xa0
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	2200      	movs	r2, #0
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	0018      	movs	r0, r3
 8000456:	f000 ff28 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 800045a:	23a0      	movs	r3, #160	; 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2201      	movs	r2, #1
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	0018      	movs	r0, r3
 8000464:	f000 ff21 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 8000468:	e285      	b.n	8000976 <main+0x75a>

	  	  case 4:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 0);
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	01db      	lsls	r3, r3, #7
 800046e:	4868      	ldr	r0, [pc, #416]	; (8000610 <main+0x3f4>)
 8000470:	2200      	movs	r2, #0
 8000472:	0019      	movs	r1, r3
 8000474:	f000 ff19 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 0);
 8000478:	4b65      	ldr	r3, [pc, #404]	; (8000610 <main+0x3f4>)
 800047a:	2200      	movs	r2, #0
 800047c:	2110      	movs	r1, #16
 800047e:	0018      	movs	r0, r3
 8000480:	f000 ff13 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 8000484:	4b62      	ldr	r3, [pc, #392]	; (8000610 <main+0x3f4>)
 8000486:	2201      	movs	r2, #1
 8000488:	2120      	movs	r1, #32
 800048a:	0018      	movs	r0, r3
 800048c:	f000 ff0d 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 8000490:	4b5f      	ldr	r3, [pc, #380]	; (8000610 <main+0x3f4>)
 8000492:	2200      	movs	r2, #0
 8000494:	2108      	movs	r1, #8
 8000496:	0018      	movs	r0, r3
 8000498:	f000 ff07 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 800049c:	4b64      	ldr	r3, [pc, #400]	; (8000630 <main+0x414>)
 800049e:	2201      	movs	r2, #1
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 ff01 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 0);
 80004a8:	4b59      	ldr	r3, [pc, #356]	; (8000610 <main+0x3f4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	2101      	movs	r1, #1
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 fefb 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 80004b4:	23a0      	movs	r3, #160	; 0xa0
 80004b6:	05db      	lsls	r3, r3, #23
 80004b8:	2201      	movs	r2, #1
 80004ba:	2180      	movs	r1, #128	; 0x80
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fef4 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 80004c2:	23a0      	movs	r3, #160	; 0xa0
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	2201      	movs	r2, #1
 80004c8:	2140      	movs	r1, #64	; 0x40
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 feed 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 80004d0:	e251      	b.n	8000976 <main+0x75a>

	  	  case 5:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 0);
 80004d2:	2380      	movs	r3, #128	; 0x80
 80004d4:	01db      	lsls	r3, r3, #7
 80004d6:	484e      	ldr	r0, [pc, #312]	; (8000610 <main+0x3f4>)
 80004d8:	2200      	movs	r2, #0
 80004da:	0019      	movs	r1, r3
 80004dc:	f000 fee5 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 80004e0:	4b4b      	ldr	r3, [pc, #300]	; (8000610 <main+0x3f4>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	2110      	movs	r1, #16
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 fedf 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 80004ec:	4b48      	ldr	r3, [pc, #288]	; (8000610 <main+0x3f4>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	2120      	movs	r1, #32
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fed9 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 80004f8:	4b45      	ldr	r3, [pc, #276]	; (8000610 <main+0x3f4>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	2108      	movs	r1, #8
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fed3 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 0);
 8000504:	4b4a      	ldr	r3, [pc, #296]	; (8000630 <main+0x414>)
 8000506:	2200      	movs	r2, #0
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fecd 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 8000510:	4b3f      	ldr	r3, [pc, #252]	; (8000610 <main+0x3f4>)
 8000512:	2201      	movs	r2, #1
 8000514:	2101      	movs	r1, #1
 8000516:	0018      	movs	r0, r3
 8000518:	f000 fec7 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 800051c:	23a0      	movs	r3, #160	; 0xa0
 800051e:	05db      	lsls	r3, r3, #23
 8000520:	2201      	movs	r2, #1
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	0018      	movs	r0, r3
 8000526:	f000 fec0 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 800052a:	23a0      	movs	r3, #160	; 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	2201      	movs	r2, #1
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	0018      	movs	r0, r3
 8000534:	f000 feb9 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 8000538:	e21d      	b.n	8000976 <main+0x75a>

	  	  case 6:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	01db      	lsls	r3, r3, #7
 800053e:	4834      	ldr	r0, [pc, #208]	; (8000610 <main+0x3f4>)
 8000540:	2201      	movs	r2, #1
 8000542:	0019      	movs	r1, r3
 8000544:	f000 feb1 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 8000548:	4b31      	ldr	r3, [pc, #196]	; (8000610 <main+0x3f4>)
 800054a:	2201      	movs	r2, #1
 800054c:	2110      	movs	r1, #16
 800054e:	0018      	movs	r0, r3
 8000550:	f000 feab 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 8000554:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <main+0x3f4>)
 8000556:	2201      	movs	r2, #1
 8000558:	2120      	movs	r1, #32
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fea5 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 8000560:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <main+0x3f4>)
 8000562:	2200      	movs	r2, #0
 8000564:	2108      	movs	r1, #8
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fe9f 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 0);
 800056c:	4b30      	ldr	r3, [pc, #192]	; (8000630 <main+0x414>)
 800056e:	2200      	movs	r2, #0
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	0018      	movs	r0, r3
 8000574:	f000 fe99 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <main+0x3f4>)
 800057a:	2201      	movs	r2, #1
 800057c:	2101      	movs	r1, #1
 800057e:	0018      	movs	r0, r3
 8000580:	f000 fe93 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 8000584:	23a0      	movs	r3, #160	; 0xa0
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	2201      	movs	r2, #1
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fe8c 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	2201      	movs	r2, #1
 8000598:	2140      	movs	r1, #64	; 0x40
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fe85 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 80005a0:	e1e9      	b.n	8000976 <main+0x75a>

	  	  case 7:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 80005a2:	2380      	movs	r3, #128	; 0x80
 80005a4:	01db      	lsls	r3, r3, #7
 80005a6:	481a      	ldr	r0, [pc, #104]	; (8000610 <main+0x3f4>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	0019      	movs	r1, r3
 80005ac:	f000 fe7d 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 0);
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <main+0x3f4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	2110      	movs	r1, #16
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fe77 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 0);
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <main+0x3f4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	2120      	movs	r1, #32
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fe71 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <main+0x3f4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	2108      	movs	r1, #8
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fe6b 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 0);
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <main+0x414>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 fe65 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <main+0x3f4>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	2101      	movs	r1, #1
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 fe5f 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 80005ec:	23a0      	movs	r3, #160	; 0xa0
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	2201      	movs	r2, #1
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 fe58 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 0);
 80005fa:	23a0      	movs	r3, #160	; 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	2200      	movs	r2, #0
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	0018      	movs	r0, r3
 8000604:	f000 fe51 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 8000608:	e1b5      	b.n	8000976 <main+0x75a>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	2000002c 	.word	0x2000002c
 8000610:	50000400 	.word	0x50000400
 8000614:	20000031 	.word	0x20000031
 8000618:	20000029 	.word	0x20000029
 800061c:	50000c00 	.word	0x50000c00
 8000620:	20000030 	.word	0x20000030
 8000624:	20000028 	.word	0x20000028
 8000628:	2000002a 	.word	0x2000002a
 800062c:	08001db4 	.word	0x08001db4
 8000630:	50000800 	.word	0x50000800

	  	  case 8:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	01db      	lsls	r3, r3, #7
 8000638:	48cf      	ldr	r0, [pc, #828]	; (8000978 <main+0x75c>)
 800063a:	2201      	movs	r2, #1
 800063c:	0019      	movs	r1, r3
 800063e:	f000 fe34 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 8000642:	4bcd      	ldr	r3, [pc, #820]	; (8000978 <main+0x75c>)
 8000644:	2201      	movs	r2, #1
 8000646:	2110      	movs	r1, #16
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fe2e 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 800064e:	4bca      	ldr	r3, [pc, #808]	; (8000978 <main+0x75c>)
 8000650:	2201      	movs	r2, #1
 8000652:	2120      	movs	r1, #32
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fe28 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 800065a:	4bc7      	ldr	r3, [pc, #796]	; (8000978 <main+0x75c>)
 800065c:	2200      	movs	r2, #0
 800065e:	2108      	movs	r1, #8
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fe22 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 8000666:	4bc5      	ldr	r3, [pc, #788]	; (800097c <main+0x760>)
 8000668:	2201      	movs	r2, #1
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fe1c 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 8000672:	4bc1      	ldr	r3, [pc, #772]	; (8000978 <main+0x75c>)
 8000674:	2201      	movs	r2, #1
 8000676:	2101      	movs	r1, #1
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fe16 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 800067e:	23a0      	movs	r3, #160	; 0xa0
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	2201      	movs	r2, #1
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fe0f 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 800068c:	23a0      	movs	r3, #160	; 0xa0
 800068e:	05db      	lsls	r3, r3, #23
 8000690:	2201      	movs	r2, #1
 8000692:	2140      	movs	r1, #64	; 0x40
 8000694:	0018      	movs	r0, r3
 8000696:	f000 fe08 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 800069a:	e16c      	b.n	8000976 <main+0x75a>

	  	  case 9:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 0);
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	01db      	lsls	r3, r3, #7
 80006a0:	48b5      	ldr	r0, [pc, #724]	; (8000978 <main+0x75c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	0019      	movs	r1, r3
 80006a6:	f000 fe00 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 80006aa:	4bb3      	ldr	r3, [pc, #716]	; (8000978 <main+0x75c>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	2110      	movs	r1, #16
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fdfa 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 80006b6:	4bb0      	ldr	r3, [pc, #704]	; (8000978 <main+0x75c>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	2120      	movs	r1, #32
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fdf4 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 80006c2:	4bad      	ldr	r3, [pc, #692]	; (8000978 <main+0x75c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	2108      	movs	r1, #8
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fdee 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 80006ce:	4bab      	ldr	r3, [pc, #684]	; (800097c <main+0x760>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fde8 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 80006da:	4ba7      	ldr	r3, [pc, #668]	; (8000978 <main+0x75c>)
 80006dc:	2201      	movs	r2, #1
 80006de:	2101      	movs	r1, #1
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fde2 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	2201      	movs	r2, #1
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 fddb 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 80006f4:	23a0      	movs	r3, #160	; 0xa0
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	2201      	movs	r2, #1
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fdd4 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 8000702:	e138      	b.n	8000976 <main+0x75a>

	  	  case 10:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	01db      	lsls	r3, r3, #7
 8000708:	489b      	ldr	r0, [pc, #620]	; (8000978 <main+0x75c>)
 800070a:	2201      	movs	r2, #1
 800070c:	0019      	movs	r1, r3
 800070e:	f000 fdcc 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 0);
 8000712:	4b99      	ldr	r3, [pc, #612]	; (8000978 <main+0x75c>)
 8000714:	2200      	movs	r2, #0
 8000716:	2110      	movs	r1, #16
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fdc6 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 800071e:	4b96      	ldr	r3, [pc, #600]	; (8000978 <main+0x75c>)
 8000720:	2201      	movs	r2, #1
 8000722:	2120      	movs	r1, #32
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fdc0 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 1);
 800072a:	4b93      	ldr	r3, [pc, #588]	; (8000978 <main+0x75c>)
 800072c:	2201      	movs	r2, #1
 800072e:	2108      	movs	r1, #8
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fdba 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 8000736:	4b91      	ldr	r3, [pc, #580]	; (800097c <main+0x760>)
 8000738:	2201      	movs	r2, #1
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fdb4 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 8000742:	4b8d      	ldr	r3, [pc, #564]	; (8000978 <main+0x75c>)
 8000744:	2201      	movs	r2, #1
 8000746:	2101      	movs	r1, #1
 8000748:	0018      	movs	r0, r3
 800074a:	f000 fdae 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 800074e:	23a0      	movs	r3, #160	; 0xa0
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	2201      	movs	r2, #1
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0018      	movs	r0, r3
 8000758:	f000 fda7 	bl	80012aa <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 800075c:	23a0      	movs	r3, #160	; 0xa0
 800075e:	05db      	lsls	r3, r3, #23
 8000760:	2201      	movs	r2, #1
 8000762:	2140      	movs	r1, #64	; 0x40
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fda0 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 800076a:	e104      	b.n	8000976 <main+0x75a>

	  	  case 11:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	4881      	ldr	r0, [pc, #516]	; (8000978 <main+0x75c>)
 8000772:	2201      	movs	r2, #1
 8000774:	0019      	movs	r1, r3
 8000776:	f000 fd98 	bl	80012aa <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 800077a:	4b7f      	ldr	r3, [pc, #508]	; (8000978 <main+0x75c>)
 800077c:	2201      	movs	r2, #1
 800077e:	2110      	movs	r1, #16
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fd92 	bl	80012aa <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 8000786:	4b7c      	ldr	r3, [pc, #496]	; (8000978 <main+0x75c>)
 8000788:	2201      	movs	r2, #1
 800078a:	2120      	movs	r1, #32
 800078c:	0018      	movs	r0, r3
 800078e:	f000 fd8c 	bl	80012aa <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 0);
 8000792:	4b79      	ldr	r3, [pc, #484]	; (8000978 <main+0x75c>)
 8000794:	2200      	movs	r2, #0
 8000796:	2108      	movs	r1, #8
 8000798:	0018      	movs	r0, r3
 800079a:	f000 fd86 	bl	80012aa <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 800079e:	4b77      	ldr	r3, [pc, #476]	; (800097c <main+0x760>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 fd80 	bl	80012aa <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 80007aa:	4b73      	ldr	r3, [pc, #460]	; (8000978 <main+0x75c>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fd7a 	bl	80012aa <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 80007b6:	23a0      	movs	r3, #160	; 0xa0
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2201      	movs	r2, #1
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fd73 	bl	80012aa <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 80007c4:	23a0      	movs	r3, #160	; 0xa0
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	2201      	movs	r2, #1
 80007ca:	2140      	movs	r1, #64	; 0x40
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fd6c 	bl	80012aa <HAL_GPIO_WritePin>
		  	  break;
 80007d2:	e0d0      	b.n	8000976 <main+0x75a>

	  	  case 12:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	01db      	lsls	r3, r3, #7
 80007d8:	4867      	ldr	r0, [pc, #412]	; (8000978 <main+0x75c>)
 80007da:	2201      	movs	r2, #1
 80007dc:	0019      	movs	r1, r3
 80007de:	f000 fd64 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 80007e2:	4b65      	ldr	r3, [pc, #404]	; (8000978 <main+0x75c>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	2110      	movs	r1, #16
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fd5e 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 0);
 80007ee:	4b62      	ldr	r3, [pc, #392]	; (8000978 <main+0x75c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	2120      	movs	r1, #32
 80007f4:	0018      	movs	r0, r3
 80007f6:	f000 fd58 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 1);
 80007fa:	4b5f      	ldr	r3, [pc, #380]	; (8000978 <main+0x75c>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	2108      	movs	r1, #8
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fd52 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 0);
 8000806:	4b5d      	ldr	r3, [pc, #372]	; (800097c <main+0x760>)
 8000808:	2200      	movs	r2, #0
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	0018      	movs	r0, r3
 800080e:	f000 fd4c 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 8000812:	4b59      	ldr	r3, [pc, #356]	; (8000978 <main+0x75c>)
 8000814:	2201      	movs	r2, #1
 8000816:	2101      	movs	r1, #1
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fd46 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 800081e:	23a0      	movs	r3, #160	; 0xa0
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	2201      	movs	r2, #1
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fd3f 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 0);
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	2200      	movs	r2, #0
 8000832:	2140      	movs	r1, #64	; 0x40
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fd38 	bl	80012aa <HAL_GPIO_WritePin>

	  		  break;
 800083a:	e09c      	b.n	8000976 <main+0x75a>

	  	  case 13:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	01db      	lsls	r3, r3, #7
 8000840:	484d      	ldr	r0, [pc, #308]	; (8000978 <main+0x75c>)
 8000842:	2201      	movs	r2, #1
 8000844:	0019      	movs	r1, r3
 8000846:	f000 fd30 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 800084a:	4b4b      	ldr	r3, [pc, #300]	; (8000978 <main+0x75c>)
 800084c:	2201      	movs	r2, #1
 800084e:	2110      	movs	r1, #16
 8000850:	0018      	movs	r0, r3
 8000852:	f000 fd2a 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 1);
 8000856:	4b48      	ldr	r3, [pc, #288]	; (8000978 <main+0x75c>)
 8000858:	2201      	movs	r2, #1
 800085a:	2120      	movs	r1, #32
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fd24 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 1);
 8000862:	4b45      	ldr	r3, [pc, #276]	; (8000978 <main+0x75c>)
 8000864:	2201      	movs	r2, #1
 8000866:	2108      	movs	r1, #8
 8000868:	0018      	movs	r0, r3
 800086a:	f000 fd1e 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 1);
 800086e:	4b43      	ldr	r3, [pc, #268]	; (800097c <main+0x760>)
 8000870:	2201      	movs	r2, #1
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	0018      	movs	r0, r3
 8000876:	f000 fd18 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 800087a:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <main+0x75c>)
 800087c:	2201      	movs	r2, #1
 800087e:	2101      	movs	r1, #1
 8000880:	0018      	movs	r0, r3
 8000882:	f000 fd12 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 8000886:	23a0      	movs	r3, #160	; 0xa0
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	2201      	movs	r2, #1
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fd0b 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 0);
 8000894:	23a0      	movs	r3, #160	; 0xa0
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	2200      	movs	r2, #0
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fd04 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 80008a2:	e068      	b.n	8000976 <main+0x75a>

	  	  case 14:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	01db      	lsls	r3, r3, #7
 80008a8:	4833      	ldr	r0, [pc, #204]	; (8000978 <main+0x75c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	0019      	movs	r1, r3
 80008ae:	f000 fcfc 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 1);
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <main+0x75c>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	2110      	movs	r1, #16
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 fcf6 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 0);
 80008be:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <main+0x75c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	2120      	movs	r1, #32
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fcf0 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 1);
 80008ca:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <main+0x75c>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	2108      	movs	r1, #8
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fcea 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 0);
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <main+0x760>)
 80008d8:	2200      	movs	r2, #0
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fce4 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <main+0x75c>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	2101      	movs	r1, #1
 80008e8:	0018      	movs	r0, r3
 80008ea:	f000 fcde 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2201      	movs	r2, #1
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 fcd7 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 80008fc:	23a0      	movs	r3, #160	; 0xa0
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	2201      	movs	r2, #1
 8000902:	2140      	movs	r1, #64	; 0x40
 8000904:	0018      	movs	r0, r3
 8000906:	f000 fcd0 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 800090a:	e034      	b.n	8000976 <main+0x75a>

	  	  case 15:
	  		  HAL_GPIO_WritePin(E_1_GPIO_Port, E_1_Pin, 1);
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	01db      	lsls	r3, r3, #7
 8000910:	4819      	ldr	r0, [pc, #100]	; (8000978 <main+0x75c>)
 8000912:	2201      	movs	r2, #1
 8000914:	0019      	movs	r1, r3
 8000916:	f000 fcc8 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(D_2_GPIO_Port, D_2_Pin, 0);
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <main+0x75c>)
 800091c:	2200      	movs	r2, #0
 800091e:	2110      	movs	r1, #16
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fcc2 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(C_4_GPIO_Port, C_4_Pin, 0);
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <main+0x75c>)
 8000928:	2200      	movs	r2, #0
 800092a:	2120      	movs	r1, #32
 800092c:	0018      	movs	r0, r3
 800092e:	f000 fcbc 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(DP_5_GPIO_Port, DP_5_Pin, 1);
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <main+0x75c>)
 8000934:	2201      	movs	r2, #1
 8000936:	2108      	movs	r1, #8
 8000938:	0018      	movs	r0, r3
 800093a:	f000 fcb6 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, 0);
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <main+0x760>)
 8000940:	2200      	movs	r2, #0
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	0018      	movs	r0, r3
 8000946:	f000 fcb0 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(A_7_GPIO_Port, A_7_Pin, 1);
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <main+0x75c>)
 800094c:	2201      	movs	r2, #1
 800094e:	2101      	movs	r1, #1
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fcaa 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(F_9_GPIO_Port, F_9_Pin, 1);
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	2201      	movs	r2, #1
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fca3 	bl	80012aa <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(G_10_GPIO_Port, G_10_Pin, 1);
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	2201      	movs	r2, #1
 800096a:	2140      	movs	r1, #64	; 0x40
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fc9c 	bl	80012aa <HAL_GPIO_WritePin>
	  		  break;
 8000972:	e000      	b.n	8000976 <main+0x75a>


	  	  default:
	  		  break;
 8000974:	46c0      	nop			; (mov r8, r8)
	p_1 = HAL_GPIO_ReadPin(DIP_1_GPIO_Port, DIP_1_Pin)*8;
 8000976:	e45c      	b.n	8000232 <main+0x16>
 8000978:	50000400 	.word	0x50000400
 800097c:	50000800 	.word	0x50000800

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b095      	sub	sp, #84	; 0x54
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	2414      	movs	r4, #20
 8000988:	193b      	adds	r3, r7, r4
 800098a:	0018      	movs	r0, r3
 800098c:	233c      	movs	r3, #60	; 0x3c
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f001 f9fb 	bl	8001d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	0018      	movs	r0, r3
 800099a:	2310      	movs	r3, #16
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f001 f9f4 	bl	8001d8c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fc9b 	bl	80012e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2202      	movs	r2, #2
 80009b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	0052      	lsls	r2, r2, #1
 80009ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009bc:	0021      	movs	r1, r4
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2240      	movs	r2, #64	; 0x40
 80009c8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2202      	movs	r2, #2
 80009ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2202      	movs	r2, #2
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2208      	movs	r2, #8
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	0292      	lsls	r2, r2, #10
 80009e8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2280      	movs	r2, #128	; 0x80
 80009ee:	0492      	lsls	r2, r2, #18
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	0592      	lsls	r2, r2, #22
 80009f8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fcb1 	bl	8001364 <HAL_RCC_OscConfig>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a06:	f000 f903 	bl	8000c10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2202      	movs	r2, #2
 8000a14:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2102      	movs	r1, #2
 8000a26:	0018      	movs	r0, r3
 8000a28:	f001 f802 	bl	8001a30 <HAL_RCC_ClockConfig>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a30:	f000 f8ee 	bl	8000c10 <Error_Handler>
  }
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b015      	add	sp, #84	; 0x54
 8000a3a:	bd90      	pop	{r4, r7, pc}

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b08b      	sub	sp, #44	; 0x2c
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	2414      	movs	r4, #20
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	0018      	movs	r0, r3
 8000a48:	2314      	movs	r3, #20
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f001 f99d 	bl	8001d8c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b6a      	ldr	r3, [pc, #424]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b69      	ldr	r3, [pc, #420]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000a58:	2104      	movs	r1, #4
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b67      	ldr	r3, [pc, #412]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2204      	movs	r2, #4
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b64      	ldr	r3, [pc, #400]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b63      	ldr	r3, [pc, #396]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4b61      	ldr	r3, [pc, #388]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b5e      	ldr	r3, [pc, #376]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b5d      	ldr	r3, [pc, #372]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000a88:	2102      	movs	r1, #2
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b5b      	ldr	r3, [pc, #364]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2202      	movs	r2, #2
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	4b58      	ldr	r3, [pc, #352]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9e:	4b57      	ldr	r3, [pc, #348]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000aa0:	2108      	movs	r1, #8
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa6:	4b55      	ldr	r3, [pc, #340]	; (8000bfc <MX_GPIO_Init+0x1c0>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aaa:	2208      	movs	r2, #8
 8000aac:	4013      	ands	r3, r2
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD4_Pin|G_10_Pin|F_9_Pin, GPIO_PIN_RESET);
 8000ab2:	23a0      	movs	r3, #160	; 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	21e0      	movs	r1, #224	; 0xe0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fbf5 	bl	80012aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_7_Pin|E_1_Pin|DP_5_Pin|D_2_Pin
 8000ac0:	494f      	ldr	r1, [pc, #316]	; (8000c00 <MX_GPIO_Init+0x1c4>)
 8000ac2:	4b50      	ldr	r3, [pc, #320]	; (8000c04 <MX_GPIO_Init+0x1c8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 fbef 	bl	80012aa <HAL_GPIO_WritePin>
                          |C_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(B_6_GPIO_Port, B_6_Pin, GPIO_PIN_RESET);
 8000acc:	4b4e      	ldr	r3, [pc, #312]	; (8000c08 <MX_GPIO_Init+0x1cc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 fbe9 	bl	80012aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	0192      	lsls	r2, r2, #6
 8000ade:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	4a46      	ldr	r2, [pc, #280]	; (8000c08 <MX_GPIO_Init+0x1cc>)
 8000af0:	0019      	movs	r1, r3
 8000af2:	0010      	movs	r0, r2
 8000af4:	f000 fa50 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP_2_Pin */
  GPIO_InitStruct.Pin = DIP_2_Pin;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2204      	movs	r2, #4
 8000afc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2201      	movs	r2, #1
 8000b08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIP_2_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	193a      	adds	r2, r7, r4
 8000b0c:	23a0      	movs	r3, #160	; 0xa0
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 fa40 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2201      	movs	r2, #1
 8000b22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000b30:	193a      	adds	r2, r7, r4
 8000b32:	23a0      	movs	r3, #160	; 0xa0
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 fa2d 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_10_Pin F_9_Pin */
  GPIO_InitStruct.Pin = G_10_Pin|F_9_Pin;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	22c0      	movs	r2, #192	; 0xc0
 8000b42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2201      	movs	r2, #1
 8000b48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	193a      	adds	r2, r7, r4
 8000b58:	23a0      	movs	r3, #160	; 0xa0
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	0011      	movs	r1, r2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 fa1a 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_7_Pin E_1_Pin DP_5_Pin D_2_Pin
                           C_4_Pin */
  GPIO_InitStruct.Pin = A_7_Pin|E_1_Pin|DP_5_Pin|D_2_Pin
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	4a26      	ldr	r2, [pc, #152]	; (8000c00 <MX_GPIO_Init+0x1c4>)
 8000b68:	601a      	str	r2, [r3, #0]
                          |C_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <MX_GPIO_Init+0x1c8>)
 8000b80:	0019      	movs	r1, r3
 8000b82:	0010      	movs	r0, r2
 8000b84:	f000 fa08 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP_1_Pin */
  GPIO_InitStruct.Pin = DIP_1_Pin;
 8000b88:	0021      	movs	r1, r4
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	0192      	lsls	r2, r2, #6
 8000b90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b92:	000c      	movs	r4, r1
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIP_1_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <MX_GPIO_Init+0x1c8>)
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	0010      	movs	r0, r2
 8000ba8:	f000 f9f6 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_6_Pin */
  GPIO_InitStruct.Pin = B_6_Pin;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(B_6_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <MX_GPIO_Init+0x1cc>)
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0010      	movs	r0, r2
 8000bcc:	f000 f9e4 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP_3_Pin DIP_4_Pin */
  GPIO_InitStruct.Pin = DIP_3_Pin|DIP_4_Pin;
 8000bd0:	0021      	movs	r1, r4
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	22c0      	movs	r2, #192	; 0xc0
 8000bd6:	0092      	lsls	r2, r2, #2
 8000bd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2201      	movs	r2, #1
 8000be4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <MX_GPIO_Init+0x1d0>)
 8000bea:	0019      	movs	r1, r3
 8000bec:	0010      	movs	r0, r2
 8000bee:	f000 f9d3 	bl	8000f98 <HAL_GPIO_Init>

}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b00b      	add	sp, #44	; 0x2c
 8000bf8:	bd90      	pop	{r4, r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	00004039 	.word	0x00004039
 8000c04:	50000400 	.word	0x50000400
 8000c08:	50000800 	.word	0x50000800
 8000c0c:	50000c00 	.word	0x50000c00

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	2201      	movs	r2, #1
 8000c34:	4013      	ands	r3, r2
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	0549      	lsls	r1, r1, #21
 8000c44:	430a      	orrs	r2, r1
 8000c46:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	055b      	lsls	r3, r3, #21
 8000c50:	4013      	ands	r3, r2
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000c56:	23c0      	movs	r3, #192	; 0xc0
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 f8d2 	bl	8000e04 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40021000 	.word	0x40021000

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f89c 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca8:	f7ff fff7 	bl	8000c9a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cd2:	f001 f837 	bl	8001d44 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cd6:	f7ff faa1 	bl	800021c <main>

08000cda <LoopForever>:

LoopForever:
  b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce8:	08001e3c 	.word	0x08001e3c
  ldr r2, =_sbss
 8000cec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf0:	20000038 	.word	0x20000038

08000cf4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_COMP_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x3c>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_Init+0x3c>)
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	0049      	lsls	r1, r1, #1
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d12:	2003      	movs	r0, #3
 8000d14:	f000 f810 	bl	8000d38 <HAL_InitTick>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e001      	b.n	8000d28 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff ff7a 	bl	8000c1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40022000 	.word	0x40022000

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	230f      	movs	r3, #15
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_InitTick+0x88>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d02b      	beq.n	8000da8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_InitTick+0x8c>)
 8000d52:	681c      	ldr	r4, [r3, #0]
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_InitTick+0x88>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	0019      	movs	r1, r3
 8000d5a:	23fa      	movs	r3, #250	; 0xfa
 8000d5c:	0098      	lsls	r0, r3, #2
 8000d5e:	f7ff f9d1 	bl	8000104 <__udivsi3>
 8000d62:	0003      	movs	r3, r0
 8000d64:	0019      	movs	r1, r3
 8000d66:	0020      	movs	r0, r4
 8000d68:	f7ff f9cc 	bl	8000104 <__udivsi3>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 f905 	bl	8000f7e <HAL_SYSTICK_Config>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d112      	bne.n	8000d9e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d80a      	bhi.n	8000d94 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	2301      	movs	r3, #1
 8000d82:	425b      	negs	r3, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 f8e4 	bl	8000f54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_InitTick+0x90>)
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e00d      	b.n	8000db0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d94:	230f      	movs	r3, #15
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	e008      	b.n	8000db0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9e:	230f      	movs	r3, #15
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e003      	b.n	8000db0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	230f      	movs	r3, #15
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	781b      	ldrb	r3, [r3, #0]
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b005      	add	sp, #20
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_IncTick+0x1c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x20>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	18d2      	adds	r2, r2, r3
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_IncTick+0x20>)
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000034 	.word	0x20000034

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <HAL_GetTick+0x10>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	20000034 	.word	0x20000034

08000e04 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	0019      	movs	r1, r3
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	fffff9ff 	.word	0xfffff9ff

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	0002      	movs	r2, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b7f      	cmp	r3, #127	; 0x7f
 8000e44:	d828      	bhi.n	8000e98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <__NVIC_SetPriority+0xd4>)
 8000e48:	1dfb      	adds	r3, r7, #7
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	33c0      	adds	r3, #192	; 0xc0
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	589b      	ldr	r3, [r3, r2]
 8000e56:	1dfa      	adds	r2, r7, #7
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	400a      	ands	r2, r1
 8000e60:	00d2      	lsls	r2, r2, #3
 8000e62:	21ff      	movs	r1, #255	; 0xff
 8000e64:	4091      	lsls	r1, r2
 8000e66:	000a      	movs	r2, r1
 8000e68:	43d2      	mvns	r2, r2
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	22ff      	movs	r2, #255	; 0xff
 8000e74:	401a      	ands	r2, r3
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	4003      	ands	r3, r0
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e84:	481f      	ldr	r0, [pc, #124]	; (8000f04 <__NVIC_SetPriority+0xd4>)
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	33c0      	adds	r3, #192	; 0xc0
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e96:	e031      	b.n	8000efc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <__NVIC_SetPriority+0xd8>)
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	0019      	movs	r1, r3
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	3b08      	subs	r3, #8
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3306      	adds	r3, #6
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	18d3      	adds	r3, r2, r3
 8000eae:	3304      	adds	r3, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	1dfa      	adds	r2, r7, #7
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	2203      	movs	r2, #3
 8000eba:	400a      	ands	r2, r1
 8000ebc:	00d2      	lsls	r2, r2, #3
 8000ebe:	21ff      	movs	r1, #255	; 0xff
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	43d2      	mvns	r2, r2
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	019b      	lsls	r3, r3, #6
 8000ece:	22ff      	movs	r2, #255	; 0xff
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	2303      	movs	r3, #3
 8000eda:	4003      	ands	r3, r0
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <__NVIC_SetPriority+0xd8>)
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	001c      	movs	r4, r3
 8000ee8:	230f      	movs	r3, #15
 8000eea:	4023      	ands	r3, r4
 8000eec:	3b08      	subs	r3, #8
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	3306      	adds	r3, #6
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	18c3      	adds	r3, r0, r3
 8000ef8:	3304      	adds	r3, #4
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b003      	add	sp, #12
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	045b      	lsls	r3, r3, #17
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d301      	bcc.n	8000f24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f20:	2301      	movs	r3, #1
 8000f22:	e010      	b.n	8000f46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <SysTick_Config+0x44>)
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	3a01      	subs	r2, #1
 8000f2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	425b      	negs	r3, r3
 8000f30:	2103      	movs	r1, #3
 8000f32:	0018      	movs	r0, r3
 8000f34:	f7ff ff7c 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <SysTick_Config+0x44>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SysTick_Config+0x44>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	e000e010 	.word	0xe000e010

08000f54 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	210f      	movs	r1, #15
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	1c02      	adds	r2, r0, #0
 8000f64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	0011      	movs	r1, r2
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff ff5d 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b004      	add	sp, #16
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff ffbf 	bl	8000f0c <SysTick_Config>
 8000f8e:	0003      	movs	r3, r0
}
 8000f90:	0018      	movs	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	e14d      	b.n	8001244 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2101      	movs	r1, #1
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d100      	bne.n	8000fc0 <HAL_GPIO_Init+0x28>
 8000fbe:	e13e      	b.n	800123e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d005      	beq.n	8000fd8 <HAL_GPIO_Init+0x40>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d130      	bne.n	800103a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	43da      	mvns	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	0013      	movs	r3, r2
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800100e:	2201      	movs	r2, #1
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	2201      	movs	r2, #1
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	4013      	ands	r3, r2
 8001042:	2b03      	cmp	r3, #3
 8001044:	d017      	beq.n	8001076 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	43da      	mvns	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2203      	movs	r2, #3
 800107c:	4013      	ands	r3, r2
 800107e:	2b02      	cmp	r3, #2
 8001080:	d123      	bne.n	80010ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3208      	adds	r2, #8
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	58d3      	ldr	r3, [r2, r3]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2207      	movs	r2, #7
 8001094:	4013      	ands	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	43da      	mvns	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	691a      	ldr	r2, [r3, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2107      	movs	r1, #7
 80010ae:	400b      	ands	r3, r1
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	409a      	lsls	r2, r3
 80010b4:	0013      	movs	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	08da      	lsrs	r2, r3, #3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3208      	adds	r2, #8
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	6939      	ldr	r1, [r7, #16]
 80010c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	43da      	mvns	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2203      	movs	r2, #3
 80010e8:	401a      	ands	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	23c0      	movs	r3, #192	; 0xc0
 8001104:	029b      	lsls	r3, r3, #10
 8001106:	4013      	ands	r3, r2
 8001108:	d100      	bne.n	800110c <HAL_GPIO_Init+0x174>
 800110a:	e098      	b.n	800123e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800110c:	4a53      	ldr	r2, [pc, #332]	; (800125c <HAL_GPIO_Init+0x2c4>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3318      	adds	r3, #24
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	589b      	ldr	r3, [r3, r2]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2203      	movs	r2, #3
 800111e:	4013      	ands	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	220f      	movs	r2, #15
 8001124:	409a      	lsls	r2, r3
 8001126:	0013      	movs	r3, r2
 8001128:	43da      	mvns	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	23a0      	movs	r3, #160	; 0xa0
 8001134:	05db      	lsls	r3, r3, #23
 8001136:	429a      	cmp	r2, r3
 8001138:	d019      	beq.n	800116e <HAL_GPIO_Init+0x1d6>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a48      	ldr	r2, [pc, #288]	; (8001260 <HAL_GPIO_Init+0x2c8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x1d2>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a47      	ldr	r2, [pc, #284]	; (8001264 <HAL_GPIO_Init+0x2cc>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x1ce>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a46      	ldr	r2, [pc, #280]	; (8001268 <HAL_GPIO_Init+0x2d0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x1ca>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a45      	ldr	r2, [pc, #276]	; (800126c <HAL_GPIO_Init+0x2d4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x1c6>
 800115a:	2304      	movs	r3, #4
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x1d8>
 800115e:	2305      	movs	r3, #5
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x1d8>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x1d8>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x1d8>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x1d8>
 800116e:	2300      	movs	r3, #0
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	2103      	movs	r1, #3
 8001174:	400a      	ands	r2, r1
 8001176:	00d2      	lsls	r2, r2, #3
 8001178:	4093      	lsls	r3, r2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001180:	4936      	ldr	r1, [pc, #216]	; (800125c <HAL_GPIO_Init+0x2c4>)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3318      	adds	r3, #24
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800118e:	4a33      	ldr	r2, [pc, #204]	; (800125c <HAL_GPIO_Init+0x2c4>)
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	58d3      	ldr	r3, [r2, r3]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43da      	mvns	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	025b      	lsls	r3, r3, #9
 80011a8:	4013      	ands	r3, r2
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b4:	4929      	ldr	r1, [pc, #164]	; (800125c <HAL_GPIO_Init+0x2c4>)
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80011bc:	4a27      	ldr	r2, [pc, #156]	; (800125c <HAL_GPIO_Init+0x2c4>)
 80011be:	2384      	movs	r3, #132	; 0x84
 80011c0:	58d3      	ldr	r3, [r2, r3]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43da      	mvns	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	029b      	lsls	r3, r3, #10
 80011d6:	4013      	ands	r3, r2
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011e2:	491e      	ldr	r1, [pc, #120]	; (800125c <HAL_GPIO_Init+0x2c4>)
 80011e4:	2284      	movs	r2, #132	; 0x84
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_GPIO_Init+0x2c4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43da      	mvns	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	035b      	lsls	r3, r3, #13
 8001202:	4013      	ands	r3, r2
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_GPIO_Init+0x2c4>)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_GPIO_Init+0x2c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43da      	mvns	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	039b      	lsls	r3, r3, #14
 800122c:	4013      	ands	r3, r2
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_GPIO_Init+0x2c4>)
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	40da      	lsrs	r2, r3
 800124c:	1e13      	subs	r3, r2, #0
 800124e:	d000      	beq.n	8001252 <HAL_GPIO_Init+0x2ba>
 8001250:	e6aa      	b.n	8000fa8 <HAL_GPIO_Init+0x10>
  }
}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b006      	add	sp, #24
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021800 	.word	0x40021800
 8001260:	50000400 	.word	0x50000400
 8001264:	50000800 	.word	0x50000800
 8001268:	50000c00 	.word	0x50000c00
 800126c:	50001000 	.word	0x50001000

08001270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	000a      	movs	r2, r1
 800127a:	1cbb      	adds	r3, r7, #2
 800127c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	1cba      	adds	r2, r7, #2
 8001284:	8812      	ldrh	r2, [r2, #0]
 8001286:	4013      	ands	r3, r2
 8001288:	d004      	beq.n	8001294 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800128a:	230f      	movs	r3, #15
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	e003      	b.n	800129c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001294:	230f      	movs	r3, #15
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	781b      	ldrb	r3, [r3, #0]
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	0008      	movs	r0, r1
 80012b4:	0011      	movs	r1, r2
 80012b6:	1cbb      	adds	r3, r7, #2
 80012b8:	1c02      	adds	r2, r0, #0
 80012ba:	801a      	strh	r2, [r3, #0]
 80012bc:	1c7b      	adds	r3, r7, #1
 80012be:	1c0a      	adds	r2, r1, #0
 80012c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c2:	1c7b      	adds	r3, r7, #1
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ca:	1cbb      	adds	r3, r7, #2
 80012cc:	881a      	ldrh	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d2:	e003      	b.n	80012dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d4:	1cbb      	adds	r3, r7, #2
 80012d6:	881a      	ldrh	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b002      	add	sp, #8
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	0019      	movs	r1, r3
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	429a      	cmp	r2, r3
 8001306:	d11f      	bne.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	0013      	movs	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	189b      	adds	r3, r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4912      	ldr	r1, [pc, #72]	; (8001360 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001316:	0018      	movs	r0, r3
 8001318:	f7fe fef4 	bl	8000104 <__udivsi3>
 800131c:	0003      	movs	r3, r0
 800131e:	3301      	adds	r3, #1
 8001320:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001322:	e008      	b.n	8001336 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3b01      	subs	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	e001      	b.n	8001336 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e009      	b.n	800134a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	401a      	ands	r2, r3
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	429a      	cmp	r2, r3
 8001346:	d0ed      	beq.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	0018      	movs	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	b004      	add	sp, #16
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	40007000 	.word	0x40007000
 8001358:	fffff9ff 	.word	0xfffff9ff
 800135c:	20000000 	.word	0x20000000
 8001360:	000f4240 	.word	0x000f4240

08001364 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f000 fb56 	bl	8001a24 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2201      	movs	r2, #1
 800137e:	4013      	ands	r3, r2
 8001380:	d100      	bne.n	8001384 <HAL_RCC_OscConfig+0x20>
 8001382:	e07d      	b.n	8001480 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001384:	4bc3      	ldr	r3, [pc, #780]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2238      	movs	r2, #56	; 0x38
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800138e:	4bc1      	ldr	r3, [pc, #772]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2203      	movs	r2, #3
 8001394:	4013      	ands	r3, r2
 8001396:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b10      	cmp	r3, #16
 800139c:	d102      	bne.n	80013a4 <HAL_RCC_OscConfig+0x40>
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b03      	cmp	r3, #3
 80013a2:	d002      	beq.n	80013aa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013aa:	4bba      	ldr	r3, [pc, #744]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	029b      	lsls	r3, r3, #10
 80013b2:	4013      	ands	r3, r2
 80013b4:	d063      	beq.n	800147e <HAL_RCC_OscConfig+0x11a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d15f      	bne.n	800147e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	f000 fb30 	bl	8001a24 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	025b      	lsls	r3, r3, #9
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d107      	bne.n	80013e0 <HAL_RCC_OscConfig+0x7c>
 80013d0:	4bb0      	ldr	r3, [pc, #704]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4baf      	ldr	r3, [pc, #700]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	0249      	lsls	r1, r1, #9
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e020      	b.n	8001422 <HAL_RCC_OscConfig+0xbe>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	23a0      	movs	r3, #160	; 0xa0
 80013e6:	02db      	lsls	r3, r3, #11
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d10e      	bne.n	800140a <HAL_RCC_OscConfig+0xa6>
 80013ec:	4ba9      	ldr	r3, [pc, #676]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4ba8      	ldr	r3, [pc, #672]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	02c9      	lsls	r1, r1, #11
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	4ba6      	ldr	r3, [pc, #664]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4ba5      	ldr	r3, [pc, #660]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	0249      	lsls	r1, r1, #9
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	e00b      	b.n	8001422 <HAL_RCC_OscConfig+0xbe>
 800140a:	4ba2      	ldr	r3, [pc, #648]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4ba1      	ldr	r3, [pc, #644]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001410:	49a1      	ldr	r1, [pc, #644]	; (8001698 <HAL_RCC_OscConfig+0x334>)
 8001412:	400a      	ands	r2, r1
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	4b9f      	ldr	r3, [pc, #636]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4b9e      	ldr	r3, [pc, #632]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 800141c:	499f      	ldr	r1, [pc, #636]	; (800169c <HAL_RCC_OscConfig+0x338>)
 800141e:	400a      	ands	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d014      	beq.n	8001454 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fce1 	bl	8000df0 <HAL_GetTick>
 800142e:	0003      	movs	r3, r0
 8001430:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fcdc 	bl	8000df0 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e2ee      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001446:	4b93      	ldr	r3, [pc, #588]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	029b      	lsls	r3, r3, #10
 800144e:	4013      	ands	r3, r2
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0xd0>
 8001452:	e015      	b.n	8001480 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fccc 	bl	8000df0 <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145e:	f7ff fcc7 	bl	8000df0 <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e2d9      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001470:	4b88      	ldr	r3, [pc, #544]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	029b      	lsls	r3, r3, #10
 8001478:	4013      	ands	r3, r2
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0xfa>
 800147c:	e000      	b.n	8001480 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2202      	movs	r2, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d100      	bne.n	800148c <HAL_RCC_OscConfig+0x128>
 800148a:	e099      	b.n	80015c0 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800148c:	4b81      	ldr	r3, [pc, #516]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2238      	movs	r2, #56	; 0x38
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001496:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2203      	movs	r2, #3
 800149c:	4013      	ands	r3, r2
 800149e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b10      	cmp	r3, #16
 80014a4:	d102      	bne.n	80014ac <HAL_RCC_OscConfig+0x148>
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d002      	beq.n	80014b2 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d135      	bne.n	800151e <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b2:	4b78      	ldr	r3, [pc, #480]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4013      	ands	r3, r2
 80014bc:	d005      	beq.n	80014ca <HAL_RCC_OscConfig+0x166>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e2ac      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	4b72      	ldr	r3, [pc, #456]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a74      	ldr	r2, [pc, #464]	; (80016a0 <HAL_RCC_OscConfig+0x33c>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	0019      	movs	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	021a      	lsls	r2, r3, #8
 80014da:	4b6e      	ldr	r3, [pc, #440]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80014dc:	430a      	orrs	r2, r1
 80014de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d112      	bne.n	800150c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014e6:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a6e      	ldr	r2, [pc, #440]	; (80016a4 <HAL_RCC_OscConfig+0x340>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691a      	ldr	r2, [r3, #16]
 80014f4:	4b67      	ldr	r3, [pc, #412]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80014fa:	4b66      	ldr	r3, [pc, #408]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	0adb      	lsrs	r3, r3, #11
 8001500:	2207      	movs	r2, #7
 8001502:	4013      	ands	r3, r2
 8001504:	4a68      	ldr	r2, [pc, #416]	; (80016a8 <HAL_RCC_OscConfig+0x344>)
 8001506:	40da      	lsrs	r2, r3
 8001508:	4b68      	ldr	r3, [pc, #416]	; (80016ac <HAL_RCC_OscConfig+0x348>)
 800150a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800150c:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <HAL_RCC_OscConfig+0x34c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff fc11 	bl	8000d38 <HAL_InitTick>
 8001516:	1e03      	subs	r3, r0, #0
 8001518:	d051      	beq.n	80015be <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e282      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d030      	beq.n	8001588 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001526:	4b5b      	ldr	r3, [pc, #364]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a5e      	ldr	r2, [pc, #376]	; (80016a4 <HAL_RCC_OscConfig+0x340>)
 800152c:	4013      	ands	r3, r2
 800152e:	0019      	movs	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	4b57      	ldr	r3, [pc, #348]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800153a:	4b56      	ldr	r3, [pc, #344]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b55      	ldr	r3, [pc, #340]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0049      	lsls	r1, r1, #1
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fc52 	bl	8000df0 <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001552:	f7ff fc4d 	bl	8000df0 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e25f      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001564:	4b4b      	ldr	r3, [pc, #300]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4013      	ands	r3, r2
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b48      	ldr	r3, [pc, #288]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a4a      	ldr	r2, [pc, #296]	; (80016a0 <HAL_RCC_OscConfig+0x33c>)
 8001576:	4013      	ands	r3, r2
 8001578:	0019      	movs	r1, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	021a      	lsls	r2, r3, #8
 8001580:	4b44      	ldr	r3, [pc, #272]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	e01b      	b.n	80015c0 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001588:	4b42      	ldr	r3, [pc, #264]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 800158e:	4949      	ldr	r1, [pc, #292]	; (80016b4 <HAL_RCC_OscConfig+0x350>)
 8001590:	400a      	ands	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fc2c 	bl	8000df0 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fc27 	bl	8000df0 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e239      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b0:	4b38      	ldr	r3, [pc, #224]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4013      	ands	r3, r2
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x23a>
 80015bc:	e000      	b.n	80015c0 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2208      	movs	r2, #8
 80015c6:	4013      	ands	r3, r2
 80015c8:	d047      	beq.n	800165a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015ca:	4b32      	ldr	r3, [pc, #200]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2238      	movs	r2, #56	; 0x38
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b18      	cmp	r3, #24
 80015d4:	d10a      	bne.n	80015ec <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	2202      	movs	r2, #2
 80015dc:	4013      	ands	r3, r2
 80015de:	d03c      	beq.n	800165a <HAL_RCC_OscConfig+0x2f6>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d138      	bne.n	800165a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e21b      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d019      	beq.n	8001628 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80015f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	430a      	orrs	r2, r1
 80015fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fbf6 	bl	8000df0 <HAL_GetTick>
 8001604:	0003      	movs	r3, r0
 8001606:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160a:	f7ff fbf1 	bl	8000df0 <HAL_GetTick>
 800160e:	0002      	movs	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e203      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 800161e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001620:	2202      	movs	r2, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d0f1      	beq.n	800160a <HAL_RCC_OscConfig+0x2a6>
 8001626:	e018      	b.n	800165a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 800162a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 800162e:	2101      	movs	r1, #1
 8001630:	438a      	bics	r2, r1
 8001632:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fbdc 	bl	8000df0 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163e:	f7ff fbd7 	bl	8000df0 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e1e9      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	2202      	movs	r2, #2
 8001656:	4013      	ands	r3, r2
 8001658:	d1f1      	bne.n	800163e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2204      	movs	r2, #4
 8001660:	4013      	ands	r3, r2
 8001662:	d100      	bne.n	8001666 <HAL_RCC_OscConfig+0x302>
 8001664:	e0c6      	b.n	80017f4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001666:	231f      	movs	r3, #31
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2238      	movs	r2, #56	; 0x38
 8001674:	4013      	ands	r3, r2
 8001676:	2b20      	cmp	r3, #32
 8001678:	d11e      	bne.n	80016b8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_RCC_OscConfig+0x330>)
 800167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d100      	bne.n	8001686 <HAL_RCC_OscConfig+0x322>
 8001684:	e0b6      	b.n	80017f4 <HAL_RCC_OscConfig+0x490>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d000      	beq.n	8001690 <HAL_RCC_OscConfig+0x32c>
 800168e:	e0b1      	b.n	80017f4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e1c7      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
 8001694:	40021000 	.word	0x40021000
 8001698:	fffeffff 	.word	0xfffeffff
 800169c:	fffbffff 	.word	0xfffbffff
 80016a0:	ffff80ff 	.word	0xffff80ff
 80016a4:	ffffc7ff 	.word	0xffffc7ff
 80016a8:	00f42400 	.word	0x00f42400
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004
 80016b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016b8:	4bb8      	ldr	r3, [pc, #736]	; (800199c <HAL_RCC_OscConfig+0x638>)
 80016ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	055b      	lsls	r3, r3, #21
 80016c0:	4013      	ands	r3, r2
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_OscConfig+0x364>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x366>
 80016c8:	2300      	movs	r3, #0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d011      	beq.n	80016f2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4bb3      	ldr	r3, [pc, #716]	; (800199c <HAL_RCC_OscConfig+0x638>)
 80016d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016d2:	4bb2      	ldr	r3, [pc, #712]	; (800199c <HAL_RCC_OscConfig+0x638>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	0549      	lsls	r1, r1, #21
 80016d8:	430a      	orrs	r2, r1
 80016da:	63da      	str	r2, [r3, #60]	; 0x3c
 80016dc:	4baf      	ldr	r3, [pc, #700]	; (800199c <HAL_RCC_OscConfig+0x638>)
 80016de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	055b      	lsls	r3, r3, #21
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80016ea:	231f      	movs	r3, #31
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f2:	4bab      	ldr	r3, [pc, #684]	; (80019a0 <HAL_RCC_OscConfig+0x63c>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	d11a      	bne.n	8001734 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016fe:	4ba8      	ldr	r3, [pc, #672]	; (80019a0 <HAL_RCC_OscConfig+0x63c>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4ba7      	ldr	r3, [pc, #668]	; (80019a0 <HAL_RCC_OscConfig+0x63c>)
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	0049      	lsls	r1, r1, #1
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800170c:	f7ff fb70 	bl	8000df0 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001716:	f7ff fb6b 	bl	8000df0 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e17d      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001728:	4b9d      	ldr	r3, [pc, #628]	; (80019a0 <HAL_RCC_OscConfig+0x63c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4013      	ands	r3, r2
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d106      	bne.n	800174a <HAL_RCC_OscConfig+0x3e6>
 800173c:	4b97      	ldr	r3, [pc, #604]	; (800199c <HAL_RCC_OscConfig+0x638>)
 800173e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001740:	4b96      	ldr	r3, [pc, #600]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001742:	2101      	movs	r1, #1
 8001744:	430a      	orrs	r2, r1
 8001746:	65da      	str	r2, [r3, #92]	; 0x5c
 8001748:	e01c      	b.n	8001784 <HAL_RCC_OscConfig+0x420>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b05      	cmp	r3, #5
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0x408>
 8001752:	4b92      	ldr	r3, [pc, #584]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001754:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001756:	4b91      	ldr	r3, [pc, #580]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001758:	2104      	movs	r1, #4
 800175a:	430a      	orrs	r2, r1
 800175c:	65da      	str	r2, [r3, #92]	; 0x5c
 800175e:	4b8f      	ldr	r3, [pc, #572]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001760:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001762:	4b8e      	ldr	r3, [pc, #568]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001764:	2101      	movs	r1, #1
 8001766:	430a      	orrs	r2, r1
 8001768:	65da      	str	r2, [r3, #92]	; 0x5c
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0x420>
 800176c:	4b8b      	ldr	r3, [pc, #556]	; (800199c <HAL_RCC_OscConfig+0x638>)
 800176e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001770:	4b8a      	ldr	r3, [pc, #552]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001772:	2101      	movs	r1, #1
 8001774:	438a      	bics	r2, r1
 8001776:	65da      	str	r2, [r3, #92]	; 0x5c
 8001778:	4b88      	ldr	r3, [pc, #544]	; (800199c <HAL_RCC_OscConfig+0x638>)
 800177a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800177c:	4b87      	ldr	r3, [pc, #540]	; (800199c <HAL_RCC_OscConfig+0x638>)
 800177e:	2104      	movs	r1, #4
 8001780:	438a      	bics	r2, r1
 8001782:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d014      	beq.n	80017b6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fb30 	bl	8000df0 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001794:	e009      	b.n	80017aa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7ff fb2b 	bl	8000df0 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	4a80      	ldr	r2, [pc, #512]	; (80019a4 <HAL_RCC_OscConfig+0x640>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e13c      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017aa:	4b7c      	ldr	r3, [pc, #496]	; (800199c <HAL_RCC_OscConfig+0x638>)
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ae:	2202      	movs	r2, #2
 80017b0:	4013      	ands	r3, r2
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x432>
 80017b4:	e013      	b.n	80017de <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b6:	f7ff fb1b 	bl	8000df0 <HAL_GetTick>
 80017ba:	0003      	movs	r3, r0
 80017bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017be:	e009      	b.n	80017d4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c0:	f7ff fb16 	bl	8000df0 <HAL_GetTick>
 80017c4:	0002      	movs	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	4a76      	ldr	r2, [pc, #472]	; (80019a4 <HAL_RCC_OscConfig+0x640>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e127      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d4:	4b71      	ldr	r3, [pc, #452]	; (800199c <HAL_RCC_OscConfig+0x638>)
 80017d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d8:	2202      	movs	r2, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80017de:	231f      	movs	r3, #31
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017e8:	4b6c      	ldr	r3, [pc, #432]	; (800199c <HAL_RCC_OscConfig+0x638>)
 80017ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ec:	4b6b      	ldr	r3, [pc, #428]	; (800199c <HAL_RCC_OscConfig+0x638>)
 80017ee:	496e      	ldr	r1, [pc, #440]	; (80019a8 <HAL_RCC_OscConfig+0x644>)
 80017f0:	400a      	ands	r2, r1
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2220      	movs	r2, #32
 80017fa:	4013      	ands	r3, r2
 80017fc:	d039      	beq.n	8001872 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d01b      	beq.n	800183e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001806:	4b65      	ldr	r3, [pc, #404]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b64      	ldr	r3, [pc, #400]	; (800199c <HAL_RCC_OscConfig+0x638>)
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	03c9      	lsls	r1, r1, #15
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001814:	f7ff faec 	bl	8000df0 <HAL_GetTick>
 8001818:	0003      	movs	r3, r0
 800181a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800181e:	f7ff fae7 	bl	8000df0 <HAL_GetTick>
 8001822:	0002      	movs	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e0f9      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001830:	4b5a      	ldr	r3, [pc, #360]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	4013      	ands	r3, r2
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x4ba>
 800183c:	e019      	b.n	8001872 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800183e:	4b57      	ldr	r3, [pc, #348]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001844:	4959      	ldr	r1, [pc, #356]	; (80019ac <HAL_RCC_OscConfig+0x648>)
 8001846:	400a      	ands	r2, r1
 8001848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff fad1 	bl	8000df0 <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001854:	f7ff facc 	bl	8000df0 <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0de      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001866:	4b4d      	ldr	r3, [pc, #308]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	041b      	lsls	r3, r3, #16
 800186e:	4013      	ands	r3, r2
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d100      	bne.n	800187c <HAL_RCC_OscConfig+0x518>
 800187a:	e0d2      	b.n	8001a22 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187c:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_RCC_OscConfig+0x638>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2238      	movs	r2, #56	; 0x38
 8001882:	4013      	ands	r3, r2
 8001884:	2b10      	cmp	r3, #16
 8001886:	d100      	bne.n	800188a <HAL_RCC_OscConfig+0x526>
 8001888:	e081      	b.n	800198e <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d156      	bne.n	8001940 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001892:	4b42      	ldr	r3, [pc, #264]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b41      	ldr	r3, [pc, #260]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001898:	4945      	ldr	r1, [pc, #276]	; (80019b0 <HAL_RCC_OscConfig+0x64c>)
 800189a:	400a      	ands	r2, r1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff faa7 	bl	8000df0 <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff faa2 	bl	8000df0 <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e0b4      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ba:	4b38      	ldr	r3, [pc, #224]	; (800199c <HAL_RCC_OscConfig+0x638>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	049b      	lsls	r3, r3, #18
 80018c2:	4013      	ands	r3, r2
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c6:	4b35      	ldr	r3, [pc, #212]	; (800199c <HAL_RCC_OscConfig+0x638>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	4a3a      	ldr	r2, [pc, #232]	; (80019b4 <HAL_RCC_OscConfig+0x650>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f2:	431a      	orrs	r2, r3
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <HAL_RCC_OscConfig+0x638>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <HAL_RCC_OscConfig+0x638>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	0449      	lsls	r1, r1, #17
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_OscConfig+0x638>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_RCC_OscConfig+0x638>)
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	0549      	lsls	r1, r1, #21
 8001912:	430a      	orrs	r2, r1
 8001914:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff fa6b 	bl	8000df0 <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff fa66 	bl	8000df0 <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e078      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	049b      	lsls	r3, r3, #18
 800193a:	4013      	ands	r3, r2
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x5bc>
 800193e:	e070      	b.n	8001a22 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001946:	491a      	ldr	r1, [pc, #104]	; (80019b0 <HAL_RCC_OscConfig+0x64c>)
 8001948:	400a      	ands	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_RCC_OscConfig+0x638>)
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001952:	2103      	movs	r1, #3
 8001954:	438a      	bics	r2, r1
 8001956:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_RCC_OscConfig+0x638>)
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_RCC_OscConfig+0x638>)
 800195e:	4916      	ldr	r1, [pc, #88]	; (80019b8 <HAL_RCC_OscConfig+0x654>)
 8001960:	400a      	ands	r2, r1
 8001962:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fa44 	bl	8000df0 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff fa3f 	bl	8000df0 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e051      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_RCC_OscConfig+0x638>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	049b      	lsls	r3, r3, #18
 8001988:	4013      	ands	r3, r2
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x60a>
 800198c:	e049      	b.n	8001a22 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d112      	bne.n	80019bc <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e044      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	40021000 	.word	0x40021000
 80019a0:	40007000 	.word	0x40007000
 80019a4:	00001388 	.word	0x00001388
 80019a8:	efffffff 	.word	0xefffffff
 80019ac:	ffbfffff 	.word	0xffbfffff
 80019b0:	feffffff 	.word	0xfeffffff
 80019b4:	11c1808c 	.word	0x11c1808c
 80019b8:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x6c8>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2203      	movs	r2, #3
 80019c6:	401a      	ands	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d126      	bne.n	8001a1e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2270      	movs	r2, #112	; 0x70
 80019d4:	401a      	ands	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d11f      	bne.n	8001a1e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	23fe      	movs	r3, #254	; 0xfe
 80019e2:	01db      	lsls	r3, r3, #7
 80019e4:	401a      	ands	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d116      	bne.n	8001a1e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	23f8      	movs	r3, #248	; 0xf8
 80019f4:	039b      	lsls	r3, r3, #14
 80019f6:	401a      	ands	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d10e      	bne.n	8001a1e <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	23e0      	movs	r3, #224	; 0xe0
 8001a04:	051b      	lsls	r3, r3, #20
 8001a06:	401a      	ands	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	0f5b      	lsrs	r3, r3, #29
 8001a14:	075a      	lsls	r2, r3, #29
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d001      	beq.n	8001a22 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	0018      	movs	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b008      	add	sp, #32
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0e9      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2207      	movs	r2, #7
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d91e      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2207      	movs	r2, #7
 8001a58:	4393      	bics	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a64:	f7ff f9c4 	bl	8000df0 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a6c:	e009      	b.n	8001a82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6e:	f7ff f9bf 	bl	8000df0 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	4a6a      	ldr	r2, [pc, #424]	; (8001c24 <HAL_RCC_ClockConfig+0x1f4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0ca      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a82:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2207      	movs	r2, #7
 8001a88:	4013      	ands	r3, r2
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1ee      	bne.n	8001a6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2202      	movs	r2, #2
 8001a96:	4013      	ands	r3, r2
 8001a98:	d015      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d006      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001aa4:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001aaa:	21e0      	movs	r1, #224	; 0xe0
 8001aac:	01c9      	lsls	r1, r1, #7
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab2:	4b5d      	ldr	r3, [pc, #372]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	4a5d      	ldr	r2, [pc, #372]	; (8001c2c <HAL_RCC_ClockConfig+0x1fc>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4013      	ands	r3, r2
 8001ace:	d057      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	029b      	lsls	r3, r3, #10
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d12b      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e097      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af0:	4b4d      	ldr	r3, [pc, #308]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	049b      	lsls	r3, r3, #18
 8001af8:	4013      	ands	r3, r2
 8001afa:	d11f      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e08b      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4013      	ands	r3, r2
 8001b12:	d113      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e07f      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b20:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b24:	2202      	movs	r2, #2
 8001b26:	4013      	ands	r3, r2
 8001b28:	d108      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e074      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b2e:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b32:	2202      	movs	r2, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e06d      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b3c:	4b3a      	ldr	r3, [pc, #232]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2207      	movs	r2, #7
 8001b42:	4393      	bics	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b50:	f7ff f94e 	bl	8000df0 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b58:	e009      	b.n	8001b6e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5a:	f7ff f949 	bl	8000df0 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	4a2f      	ldr	r2, [pc, #188]	; (8001c24 <HAL_RCC_ClockConfig+0x1f4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e054      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2238      	movs	r2, #56	; 0x38
 8001b74:	401a      	ands	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1ec      	bne.n	8001b5a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2207      	movs	r2, #7
 8001b86:	4013      	ands	r3, r2
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d21e      	bcs.n	8001bcc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2207      	movs	r2, #7
 8001b94:	4393      	bics	r3, r2
 8001b96:	0019      	movs	r1, r3
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ba0:	f7ff f926 	bl	8000df0 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001baa:	f7ff f921 	bl	8000df0 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_RCC_ClockConfig+0x1f4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e02c      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1ee      	bne.n	8001baa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d009      	beq.n	8001bea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <HAL_RCC_ClockConfig+0x200>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001be6:	430a      	orrs	r2, r1
 8001be8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bea:	f000 f829 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8001bee:	0001      	movs	r1, r0
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_RCC_ClockConfig+0x204>)
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	58d3      	ldr	r3, [r2, r3]
 8001c00:	221f      	movs	r2, #31
 8001c02:	4013      	ands	r3, r2
 8001c04:	000a      	movs	r2, r1
 8001c06:	40da      	lsrs	r2, r3
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_RCC_ClockConfig+0x208>)
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_ClockConfig+0x20c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff f891 	bl	8000d38 <HAL_InitTick>
 8001c16:	0003      	movs	r3, r0
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b004      	add	sp, #16
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40022000 	.word	0x40022000
 8001c24:	00001388 	.word	0x00001388
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	fffff0ff 	.word	0xfffff0ff
 8001c30:	ffff8fff 	.word	0xffff8fff
 8001c34:	08001df4 	.word	0x08001df4
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c46:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2238      	movs	r2, #56	; 0x38
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d10f      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0adb      	lsrs	r3, r3, #11
 8001c56:	2207      	movs	r2, #7
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	0013      	movs	r3, r2
 8001c60:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c62:	6839      	ldr	r1, [r7, #0]
 8001c64:	4835      	ldr	r0, [pc, #212]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c66:	f7fe fa4d 	bl	8000104 <__udivsi3>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	e05d      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2238      	movs	r2, #56	; 0x38
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d102      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c7c:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	e054      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c82:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2238      	movs	r2, #56	; 0x38
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d138      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2203      	movs	r2, #3
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d10d      	bne.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	4824      	ldr	r0, [pc, #144]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x100>)
 8001cb0:	f7fe fa28 	bl	8000104 <__udivsi3>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	227f      	movs	r2, #127	; 0x7f
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	434b      	muls	r3, r1
 8001cc4:	617b      	str	r3, [r7, #20]
        break;
 8001cc6:	e00d      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	481c      	ldr	r0, [pc, #112]	; (8001d3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ccc:	f7fe fa1a 	bl	8000104 <__udivsi3>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	227f      	movs	r2, #127	; 0x7f
 8001cdc:	4013      	ands	r3, r2
 8001cde:	434b      	muls	r3, r1
 8001ce0:	617b      	str	r3, [r7, #20]
        break;
 8001ce2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0f5b      	lsrs	r3, r3, #29
 8001cea:	2207      	movs	r2, #7
 8001cec:	4013      	ands	r3, r2
 8001cee:	3301      	adds	r3, #1
 8001cf0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	6978      	ldr	r0, [r7, #20]
 8001cf6:	f7fe fa05 	bl	8000104 <__udivsi3>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	e015      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2238      	movs	r2, #56	; 0x38
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d103      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2238      	movs	r2, #56	; 0x38
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b18      	cmp	r3, #24
 8001d1e:	d103      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d20:	23fa      	movs	r3, #250	; 0xfa
 8001d22:	01db      	lsls	r3, r3, #7
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	e001      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d2c:	693b      	ldr	r3, [r7, #16]
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b006      	add	sp, #24
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	00f42400 	.word	0x00f42400
 8001d40:	007a1200 	.word	0x007a1200

08001d44 <__libc_init_array>:
 8001d44:	b570      	push	{r4, r5, r6, lr}
 8001d46:	2600      	movs	r6, #0
 8001d48:	4d0c      	ldr	r5, [pc, #48]	; (8001d7c <__libc_init_array+0x38>)
 8001d4a:	4c0d      	ldr	r4, [pc, #52]	; (8001d80 <__libc_init_array+0x3c>)
 8001d4c:	1b64      	subs	r4, r4, r5
 8001d4e:	10a4      	asrs	r4, r4, #2
 8001d50:	42a6      	cmp	r6, r4
 8001d52:	d109      	bne.n	8001d68 <__libc_init_array+0x24>
 8001d54:	2600      	movs	r6, #0
 8001d56:	f000 f821 	bl	8001d9c <_init>
 8001d5a:	4d0a      	ldr	r5, [pc, #40]	; (8001d84 <__libc_init_array+0x40>)
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	; (8001d88 <__libc_init_array+0x44>)
 8001d5e:	1b64      	subs	r4, r4, r5
 8001d60:	10a4      	asrs	r4, r4, #2
 8001d62:	42a6      	cmp	r6, r4
 8001d64:	d105      	bne.n	8001d72 <__libc_init_array+0x2e>
 8001d66:	bd70      	pop	{r4, r5, r6, pc}
 8001d68:	00b3      	lsls	r3, r6, #2
 8001d6a:	58eb      	ldr	r3, [r5, r3]
 8001d6c:	4798      	blx	r3
 8001d6e:	3601      	adds	r6, #1
 8001d70:	e7ee      	b.n	8001d50 <__libc_init_array+0xc>
 8001d72:	00b3      	lsls	r3, r6, #2
 8001d74:	58eb      	ldr	r3, [r5, r3]
 8001d76:	4798      	blx	r3
 8001d78:	3601      	adds	r6, #1
 8001d7a:	e7f2      	b.n	8001d62 <__libc_init_array+0x1e>
 8001d7c:	08001e34 	.word	0x08001e34
 8001d80:	08001e34 	.word	0x08001e34
 8001d84:	08001e34 	.word	0x08001e34
 8001d88:	08001e38 	.word	0x08001e38

08001d8c <memset>:
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	1882      	adds	r2, r0, r2
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d100      	bne.n	8001d96 <memset+0xa>
 8001d94:	4770      	bx	lr
 8001d96:	7019      	strb	r1, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	e7f9      	b.n	8001d90 <memset+0x4>

08001d9c <_init>:
 8001d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001da2:	bc08      	pop	{r3}
 8001da4:	469e      	mov	lr, r3
 8001da6:	4770      	bx	lr

08001da8 <_fini>:
 8001da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dae:	bc08      	pop	{r3}
 8001db0:	469e      	mov	lr, r3
 8001db2:	4770      	bx	lr
